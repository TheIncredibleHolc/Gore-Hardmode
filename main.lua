-- name: GORE / Hard-Mode! 
-- description: Gore and dismemberment! Made by IncredibleHolc and cooliokid956 (Great Kingdom Official), with additional help from Blocky.cmd and the community!

----------------------------CHANGE LOG----------------------------------

--TEST TEST TEST!! REPO TEST!! 

--------Recently Added--------
--All goomba 'home' locations are now the closest mario's position.
--Boulders now lock-on to mario and insta-kill.
--Skeeters and scuttlebugs now insta-kill mario on any damage taken.
--Made the "MAAA MAAA" fire scream interruptable if Mario dies or level warps.
--Mario can now "cool off" from being on fire if he jumps into water before death.
--REBALANCED HAZY MAZE CAVE; Gas will rise as soon as mario enters it. Mario can't jump high enough for fresh air anymore.
--Racing penguin is very fast now and will psycologically roast mario to death if mario loses the race.
--Jolly Roger Bay is now Jolly Roger Hell. There's no obtainable stars with the lava lake.
--Bowser Bombs now randomly teleport around their Y-axis.
--Flyguys will now kamakazi themselves at Mario randomly.  
--Mario didn't tie his shows and now trips when approaching the princess.

-------TESTING NOTES AND KNOWN BUGS-------------
--Bowser minigame spawns multiple Ukiki's if multiple players are around.
--Penguin Race spawns the wrong star.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- GBEHAVIORVALUES -- Fast switches to manipulate the game.

--gLevelValues.entryLevel = LEVEL_BOWSER_3


--(BoB, THI, TTM) bowling balls faster
--gBehaviorValues.BowlingBallBobSpeed = 30
--gBehaviorValues.BowlingBallBob2Speed = 30
gBehaviorValues.BowlingBallTtmSpeed = 40
gBehaviorValues.BowlingBallThiSmallSpeed = 45
gBehaviorValues.BowlingBallThiSmallSpeed = 45

--Koopa the quick is STUPID fast. Player has to finish race in 20.9 seconds.
gBehaviorValues.KoopaBobAgility = 20
gBehaviorValues.KoopaThiAgility = 25
gBehaviorValues.KoopaCatchupAgility = 60

-- King bobomb health
gBehaviorValues.KingBobombHealth = 6

--Slide and Metal cap timers
gLevelValues.pssSlideStarTime = 570 -- 19 Seconds
gLevelValues.metalCapDuration = 90 -- 3 seconds, LOL.



----helpers------

function is_lowest_active_player()
	return get_network_player_smallest_global().localIndex == 0
end

function ia(m)
	return m.playerIndex == 0
end
function lerp(a, b, t) return a * (1 - t) + b * t end


function testing(m)
	if (m.controller.buttonPressed & D_JPAD) ~= 0 then
		--spawn_sync_if_main(id_bhvFlame, E_MODEL_RED_FLAME, m.pos.x + 100, m.pos.y, m.pos.z, nil, m.playerIndex)
		--spawn_sync_object(id_bhvLava, E_MODEL_LAVA, m.pos.x, m.waterLevel + 1, m.pos.z, function (o)
        spawn_non_sync_object(id_bhvGrandStar, E_MODEL_STAR, m.pos.x, m.pos.y + 400, m.pos.z, function (o)
            o.oAction = 0
        end)
		--	end)
		--spawn_sync_object(id_bhvBowserBomb, E_MODEL_BOWSER_BOMB,  m.pos.x + 100, m.pos.y, m.pos.z, nil)
	end
	if (m.controller.buttonPressed & L_JPAD) ~= 0 then
		--warp_to_level(2, 1, 1)
		--spawn_non_sync_object(id_bhvLightning, E_MODEL_LIGHTNING, m.pos.x, m.pos.y + 350, m.pos.z, nil)

		spawn_non_sync_object(id_bhvStaticObject, E_MODEL_RING, 0, m.pos.y - 100, 0, function(o)
			obj_scale(o, 0.6)
		end)

		--spawn_non_sync_object(id_bhvSkybox1, E_MODEL_SKYBOX, m.pos.x, m.pos.y + 0, m.pos.z, nil)
		--spawn_non_sync_object(id_bhvSkybox2, E_MODEL_SKYBOX2, m.pos.x, m.pos.y - 9500, m.pos.z, nil)
		--spawn_non_sync_object(id_bhvSkybox2, E_MODEL_SKYBOX2, m.pos.x, m.pos.y + 500, m.pos.z, nil)
		--spawn_non_sync_object(id_bhvSkybox1, E_MODEL_SKYBOX, m.pos.x, m.pos.y + 1000, m.pos.z, nil)
		--spawn_non_sync_object(id_bhvSkybox2, E_MODEL_SKYBOX, m.pos.x, m.pos.y + 1500, m.pos.z, nil)
		--spawn_non_sync_object(id_bhvSkybox1, E_MODEL_SKYBOX, m.pos.x, m.pos.y + 2000, m.pos.z, nil)
		--spawn_non_sync_object(id_bhvSkybox2, E_MODEL_SKYBOX, m.pos.x, m.pos.y + 2500, m.pos.z, nil)
		--spawn_non_sync_object(id_bhvSkybox1, E_MODEL_SKYBOX, m.pos.x, m.pos.y + 2800, m.pos.z, nil)
		--spawn_non_sync_object(id_bhvSkybox2, E_MODEL_SKYBOX, m.pos.x, m.pos.y + 3400, m.pos.z, nil)
	end
	if (m.controller.buttonPressed & R_JPAD) ~= 0 then
		--spawn_non_sync_object(id_bhvGrandStarShadow, E_MODEL_GSSHADOW, m.pos.x, m.pos.y + 80, m.pos.z, nil)
		--spawn_non_sync_object(id_bhvBubbleParticleSpawner, E_MODEL_BUBBLE, m.pos.x, m.pos.y + 80, m.pos.z, nil)

	end
end

function spawn_sync_if_main(behaviorId, modelId, x, y, z, objSetupFunction, i)
	print("index:", i)
	print("attempt by "..get_network_player_smallest_global().name)
	print(get_network_player_smallest_global().localIndex + i)
	if get_network_player_smallest_global().localIndex + i == 0 then print("passed!") return spawn_sync_object(behaviorId, modelId, x, y, z, objSetupFunction) end
end


local function modsupport()
	for key,value in pairs(gActiveMods) do
		if (value.name == "Flood") then
			floodenabled = true
		end
	end
end

------Globals--------
gGlobalSyncTable.deathcounter = 0
gGlobalSyncTable.toaddeathcounter = 0

------Animations---------
smlua_anim_util_register_animation("MARIO_SHOCK",
	0,
	0,
	0,
	1,
	120,
	{
		0x0000, 0x00B4, 0x0020, 0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 
		0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 
		0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 
		0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 
		0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 
		0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 
		0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 
		0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 
		0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 
		0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 
		0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 
		0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 
		0xFFFF, 0x0000, 0x0020, 0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0020, 
		0x001D, 0x0008, 0xFFF7, 0xFFFF, 0x0000, 0x0000, 0x3FFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0F47, 0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 
		0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 
		0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 
		0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 
		0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 
		0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 
		0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 
		0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 
		0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 
		0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 
		0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 
		0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 
		0x1184, 0x0D09, 0x0F47, 0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x0F47, 
		0x1184, 0x1184, 0x1184, 0x1184, 0x0D09, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 
		0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 
		0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 
		0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 
		0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 
		0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 
		0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 
		0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 
		0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 
		0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 
		0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 
		0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 
		0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 
		0x4194, 0x40A1, 0x3C5A, 0x3FC9, 0x448A, 0x478E, 0x4194, 0x40A1, 0xFFFF, 
		0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 
		0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 
		0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 
		0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 
		0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 
		0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 
		0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 
		0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 
		0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 
		0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 
		0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 
		0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 
		0xF547, 0x02DB, 0x0F7A, 0x0243, 0x0000, 0xFFFF, 0xF547, 0x02DB, 0x0F7A, 
		0x0243, 0x0000, 0x0000, 0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 
		0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 
		0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 
		0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 
		0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 
		0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 
		0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 
		0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 
		0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 
		0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 
		0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 
		0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 
		0x0076, 0xFFFF, 0x0000, 0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0x0000, 
		0x024B, 0x0378, 0x03AF, 0x0076, 0xFFFF, 0xF21B, 0xF95D, 0xFA29, 0xF955, 
		0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 
		0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 
		0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 
		0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 
		0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 
		0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 
		0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 
		0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 
		0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 
		0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 
		0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 
		0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 
		0xF6EA, 0xF696, 0xF21B, 0xF95D, 0xFA29, 0xF955, 0xF6EA, 0xF696, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x1332, 0x00F9, 0xEFB5, 0x0831, 
		0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 
		0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 
		0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 
		0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 
		0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 
		0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 
		0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 
		0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 
		0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 
		0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 
		0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 
		0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 
		0x0074, 0x0074, 0x1332, 0x00F9, 0xEFB5, 0x0831, 0x0074, 0x0001, 0xFFFE, 
		0xC170, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 
		0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 
		0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 
		0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 
		0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 
		0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 
		0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 
		0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 
		0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 
		0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 
		0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 
		0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 
		0xB612, 0xBC16, 0xC742, 0xCD46, 0xC1AC, 0xB612, 0xB612, 0xBC16, 0xC742, 
		0xCD46, 0xC1AC, 0xB612, 0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 
		0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 
		0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 
		0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 
		0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 
		0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 
		0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 
		0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 
		0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 
		0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 
		0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 
		0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 
		0xDB64, 0xD646, 0xD646, 0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0xD646, 
		0xD8ED, 0xDDDA, 0xE081, 0xDB64, 0xD646, 0x20D8, 0x1555, 0x0F22, 0x1B17, 
		0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 
		0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 
		0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 
		0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 
		0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 
		0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 
		0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 
		0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 
		0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 
		0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 
		0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 
		0x1555, 0x0F22, 0x1B17, 0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 
		0x270B, 0x270B, 0x20D8, 0x1555, 0x0F22, 0x1B17, 0x270B, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 
		0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 
		0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 
		0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 
		0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 
		0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 
		0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 
		0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 
		0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 
		0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 
		0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 
		0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 
		0xE92F, 0xCFEC, 0xF16A, 0xE997, 0xD94B, 0xE706, 0xE92F, 0xCFEC, 0xF16A, 
		0xE997, 0xD94B, 0xE706, 0xE92F, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 
		0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 
		0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 
		0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 
		0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 
		0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 
		0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 
		0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 
		0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 
		0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 
		0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 
		0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 
		0xEE77, 0xEEC6, 0xF43B, 0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 
		0xF43B, 0xF065, 0xEF28, 0xEE77, 0xEEC6, 0xF43B, 0xE82D, 0xE72F, 0xE7AE, 
		0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 
		0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 
		0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 
		0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 
		0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 
		0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 
		0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 
		0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 
		0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 
		0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 
		0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 
		0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 
		0xE956, 0xF0B2, 0xF0B2, 0xE82D, 0xE72F, 0xE7AE, 0xE956, 0xF0B2, 0xF2F0, 
		0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 
		0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 
		0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 
		0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 
		0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 
		0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 
		0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 
		0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 
		0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 
		0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 
		0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 
		0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 
		0xEEDD, 0xE975, 0xE640, 0xEF34, 0xEF34, 0xF2F0, 0xEEDD, 0xE975, 0xE640, 
		0xEF34, 0x0001, 0xFFFE, 0xC170, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 
		0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 
		0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 
		0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 
		0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 
		0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 
		0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 
		0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 
		0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 
		0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 
		0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 
		0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 
		0xDC8C, 0xDFD8, 0x3185, 0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 
		0x3185, 0x4F4E, 0xF5C8, 0xDC8C, 0xDFD8, 0x3185, 0x2452, 0x47E7, 0x4A21, 
		0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 
		0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 
		0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 
		0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 
		0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 
		0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 
		0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 
		0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 
		0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 
		0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 
		0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 
		0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 
		0x4F2F, 0x33A3, 0x33A3, 0x2452, 0x47E7, 0x4A21, 0x4F2F, 0x33A3, 0x34B3, 
		0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 
		0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 
		0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 
		0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 
		0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 
		0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 
		0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 
		0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 
		0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 
		0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 
		0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 
		0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 
		0xCE40, 0xB071, 0xB3CE, 0x1462, 0x1462, 0x34B3, 0xCE40, 0xB071, 0xB3CE, 
		0x1462, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 
		0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 
		0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 
		0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 
		0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 
		0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 
		0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 
		0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 
		0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 
		0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 
		0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 
		0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 
		0xD180, 0xDBC2, 0xEABF, 0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 
		0xEC71, 0xEC71, 0xCEB3, 0xD180, 0xDBC2, 0xEABF, 0xEC71, 0x0523, 0x1CCE, 
		0xDE1D, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xBF5E, 0x0412, 
		0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 
		0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 
		0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 
		0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 
		0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 
		0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 
		0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 
		0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 
		0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 
		0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 
		0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 
		0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 
		0xFC47, 0xFD5E, 0x01FB, 0x0AC1, 0x0AC1, 0x0412, 0xFC47, 0xFD5E, 0x01FB, 
		0x0AC1, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 
		0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 
		0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 
		0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 
		0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 
		0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 
		0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 
		0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 
		0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 
		0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 
		0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 
		0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 
		0xEE96, 0xEF48, 0xF0B0, 0xF301, 0xF443, 0xEE96, 0xEE96, 0xEF48, 0xF0B0, 
		0xF301, 0xF443, 0xEE96, 0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 
		0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 
		0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 
		0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 
		0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 
		0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 
		0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 
		0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 
		0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 
		0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 
		0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 
		0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 
		0x9CA3, 0x8EAB, 0x8EAB, 0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0x8EAB, 
		0x9262, 0x9618, 0x9A31, 0x9CA3, 0x8EAB, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x52B4, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 
		0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 
		0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 
		0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 
		0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 
		0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 
		0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 
		0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 
		0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 
		0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 
		0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 
		0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 
		0xF6E2, 0xF658, 0xF574, 0xF671, 0xF77B, 0xF6E2, 0xF6E2, 0xF658, 0xF574, 
		0xF671, 0xF77B, 0xF6E2, 0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 
		0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 
		0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 
		0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 
		0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 
		0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 
		0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 
		0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 
		0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 
		0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 
		0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 
		0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 
		0xFB05, 0x03C3, 0x03C3, 0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0x03C3, 
		0xFE05, 0x00BA, 0xFD5F, 0xFB05, 0x03C3, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 
		0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 
		0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 
		0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 
		0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 
		0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 
		0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 
		0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 
		0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 
		0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 
		0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 
		0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 
		0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 
		0xD4BD, 0xD4BD, 0xBCF4, 0xC69E, 0xB8EF, 0xAFCC, 0xD4BD, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xBF5E, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 
		0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 
		0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 
		0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 
		0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 
		0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 
		0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 
		0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 
		0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 
		0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 
		0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 
		0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 
		0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 
		0x15DE, 0x1714, 0x1AE5, 0x190C, 0x12D1, 0x0E60, 0x15DE, 0x1714, 0x16A9, 
		0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 
		0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 
		0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 
		0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 
		0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 
		0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 
		0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 
		0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 
		0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 
		0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 
		0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 
		0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 
		0x1B5D, 0x16CB, 0x1189, 0x1110, 0x112E, 0x16A9, 0x1B5D, 0x16CB, 0x1189, 
		0x1110, 0x112E, 0xC3D1, 0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 
		0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 
		0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 
		0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 
		0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 
		0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 
		0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 
		0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 
		0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 
		0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 
		0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 
		0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 
		0xB881, 0xBAF9, 0xC3D1, 0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0xC3D1, 
		0xBF28, 0xB248, 0xA936, 0xB881, 0xBAF9, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x2B53, 0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 
		0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 
		0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 
		0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 
		0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 
		0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 
		0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 
		0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 
		0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 
		0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 
		0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 
		0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 
		0x254C, 0x2537, 0x2B53, 0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x2B53, 
		0x2A7D, 0x2897, 0x268D, 0x254C, 0x2537, 0x039A, 0x046C, 0x03B4, 0xFC21, 
		0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 
		0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 
		0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 
		0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 
		0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 
		0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 
		0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 
		0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 
		0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 
		0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 
		0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 
		0x046C, 0x03B4, 0xFC21, 0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 
		0x01ED, 0x01ED, 0x039A, 0x046C, 0x03B4, 0xFC21, 0x01ED, 0x0497, 0x0488, 
		0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 
		0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 
		0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 
		0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 
		0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 
		0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 
		0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 
		0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 
		0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 
		0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 
		0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 
		0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 
		0x045D, 0x03AF, 0x04A0, 0x04A0, 0x0497, 0x0488, 0x045D, 0x03AF, 0x04A0, 
		0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 
		0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 
		0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 
		0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 
		0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 
		0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 
		0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 
		0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 
		0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 
		0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 
		0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 
		0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 
		0xAF0F, 0xB1C8, 0xB4CB, 0xB6F8, 0xAEA7, 0xAEA7, 0xAF0F, 0xB1C8, 0xB4CB, 
		0xB6F8, 0xAEA7, 
	},
	{
		0x0001, 0x0000, 0x0001, 0x0001, 0x0078, 0x0002, 0x0001, 0x007A, 0x0001, 
		0x007B, 0x0001, 0x007C, 0x0078, 0x007D, 0x0078, 0x00F5, 0x0078, 0x016D, 
		0x0078, 0x01E5, 0x0078, 0x025D, 0x0078, 0x02D5, 0x0078, 0x034D, 0x0078, 
		0x03C5, 0x0077, 0x043D, 0x0001, 0x04B4, 0x0001, 0x04B5, 0x0001, 0x04B6, 
		0x0077, 0x04B7, 0x0077, 0x052E, 0x0077, 0x05A5, 0x0078, 0x061C, 0x0075, 
		0x0694, 0x0078, 0x0709, 0x0077, 0x0781, 0x0077, 0x07F8, 0x0077, 0x086F, 
		0x0001, 0x08E6, 0x0001, 0x08E7, 0x0001, 0x08E8, 0x0077, 0x08E9, 0x0077, 
		0x0960, 0x0077, 0x09D7, 0x0077, 0x0A4E, 0x0077, 0x0AC5, 0x0077, 0x0B3C, 
		0x0001, 0x0BB3, 0x0001, 0x0BB4, 0x0001, 0x0BB5, 0x0078, 0x0BB6, 0x0078, 
		0x0C2E, 0x0001, 0x0CA6, 0x0077, 0x0CA7, 0x0077, 0x0D1E, 0x0077, 0x0D95, 
		0x0076, 0x0E0C, 0x0078, 0x0E82, 0x0001, 0x0EFA, 0x0077, 0x0EFB, 0x0077, 
		0x0F72, 0x0077, 0x0FE9, 0x0078, 0x1060, 0x0078, 0x10D8, 0x0001, 0x1150, 
		0x0078, 0x1151, 0x0078, 0x11C9, 0x0078, 0x1241, 0x0078, 0x12B9, 0x0078, 
		0x1331, 0x0078, 0x13A9, 0x0077, 0x1421, 0x0077, 0x1498, 0x0077, 0x150F, 
	}
)

smlua_anim_util_register_animation("MARIO_NECKSNAP",
	1,
	0,
	0,
	1,
	150,
	{
		0x0000, 0x00A9, 0x00A6, 0x00A3, 0x009F, 0x009C, 0x009A, 0x0099, 0x0099, 
		0x0098, 0x0098, 0x0099, 0x0099, 0x009A, 0x009A, 0x009B, 0x009C, 0x009E, 
		0x009F, 0x00A0, 0x00A2, 0x00A3, 0x00A5, 0x00A6, 0x00A8, 0x00AA, 0x00AB, 
		0x00AC, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B3, 0x00B4, 
		0x00B4, 0x00B4, 0x00B4, 0x00B4, 0x00B5, 0x00B4, 0x00B3, 0x00B4, 0x00B6, 
		0x00BA, 0x00BF, 0x00C3, 0x00C7, 0x00C8, 0x00C8, 0x00C8, 0x00C8, 0x00C8, 
		0x00C8, 0x00C9, 0x00C9, 0x00C8, 0x00C8, 0x00C8, 0x00C8, 0x00C9, 0x00C3, 
		0x00B4, 0x00A2, 0x0090, 0x007D, 0x006C, 0x005B, 0x004D, 0x0045, 0x0050, 
		0x005E, 0x0057, 0x004D, 0x0049, 0x0048, 0x004A, 0x0057, 0x0052, 0x004E, 
		0x004C, 0x004B, 0x004A, 0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0004, 
		0x0004, 0x0003, 0x0003, 0x0002, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 
		0xFFFD, 0xFFFD, 0xFFFD, 0xFFFC, 0xFFFC, 0xFFFB, 0xFFFB, 0xFFFA, 0xFFF9, 
		0xFFF7, 0xFFF6, 0xFFF5, 0xFFF3, 0xFFF2, 0xFFF2, 0xFFF2, 0xFFF5, 0xFFFB, 
		0x0000, 0x0001, 0x0003, 0x0004, 0x0005, 0x0005, 0x0003, 0x0003, 0x0004, 
		0x0005, 0x0006, 0x0008, 0x0009, 0x0009, 0x0009, 0x0008, 0x0006, 0x0003, 
		0xFFEF, 0xFFCD, 0xFFAE, 0xFF8F, 0xFF6E, 0xFF4E, 0xFF2E, 0x0000, 0x3FFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0001, 0x0001, 
		0x0002, 0x0002, 0x0003, 0x0004, 0x0004, 0x0005, 0x0006, 0x0007, 0x0007, 
		0x0008, 0x0009, 0x0009, 0x000A, 0x000B, 0x000B, 0x000C, 0x000D, 0x000E, 
		0x000F, 0x000F, 0x000F, 0x000F, 0x000E, 0x000D, 0x000B, 0x0009, 0x0007, 
		0x0005, 0x0003, 0x0002, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFE, 
		0xFFFD, 0xFFFC, 0xFFFA, 0xFFF9, 0xFFF8, 0xFFF6, 0xFFF5, 0xFFF5, 0xFFF5, 
		0xFFF7, 0xFFF9, 0xFFFB, 0xFFFB, 0xFFFA, 0xFFF5, 0xFFEB, 0xFFDB, 0xFFC9, 
		0xFFB7, 0xFFA7, 0xFF9B, 0xFF97, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0002, 0x0002, 0x0001, 0x0000, 
		0xFFFD, 0xFFFB, 0xFFF8, 0xFFF5, 0xFFF2, 0xFFEF, 0xFFEB, 0xFFE8, 0xFFE4, 
		0xFFE1, 0xFFDD, 0xFFDA, 0xFFD6, 0xFFD3, 0xFFD0, 0xFFCD, 0xFFCA, 0xFFC7, 
		0xFFC4, 0xFFC1, 0xFFBE, 0xFFBC, 0xFFBB, 0xFFBB, 0xFFBD, 0xFFC2, 0xFFC7, 
		0xFFCF, 0xFFD6, 0xFFDF, 0xFFE7, 0xFFEF, 0xFFF6, 0xFFFB, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0026, 0x005B, 0x009B, 0x00E3, 0x0130, 0x017D, 0x01C7, 0x020A, 
		0x0244, 0x0271, 0x028C, 0x0297, 0x0296, 0x028D, 0x0281, 0x0276, 0x0271, 
		0x0270, 0x026F, 0x026D, 0x026B, 0x026A, 0x0269, 0x0268, 0x40EC, 0x41B2, 
		0x42C8, 0x4407, 0x4544, 0x4655, 0x475D, 0x4888, 0x49C0, 0x4AF1, 0x4C03, 
		0x4CE1, 0x4D76, 0x4DAB, 0x4D9E, 0x4D7D, 0x4D4A, 0x4D07, 0x4CB5, 0x4C55, 
		0x4BEA, 0x4B74, 0x4AF7, 0x4A72, 0x49E8, 0x495A, 0x48CB, 0x483B, 0x47AC, 
		0x4720, 0x4698, 0x4617, 0x4584, 0x44D2, 0x440F, 0x4347, 0x4288, 0x41E1, 
		0x415F, 0x40FA, 0x40A1, 0x4051, 0x400B, 0x3FCE, 0x3F99, 0x3F6A, 0x3F42, 
		0x3F1F, 0x3F00, 0x3F00, 0x3F00, 0x3F00, 0x3F00, 0x3F00, 0x3F00, 0x3F00, 
		0x3F00, 0x3F00, 0x3F00, 0x3F00, 0x3B67, 0x366D, 0x3065, 0x29A3, 0x227C, 
		0x1B45, 0x1450, 0x0DF4, 0x0884, 0x0454, 0x01D9, 0x00FC, 0x0144, 0x0238, 
		0x035D, 0x043A, 0x0454, 0x03AB, 0x02AC, 0x017E, 0x004C, 0xFF3E, 0xFE7E, 
		0xFE35, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFBB, 0xFF15, 
		0xFE47, 0xFD8E, 0xFD22, 0xFD3F, 0xFE20, 0xFFFF, 0x048A, 0x0C06, 0x1499, 
		0x1C66, 0x218F, 0x2239, 0x1C32, 0x1089, 0x023D, 0xF44D, 0xE9BA, 0xE584, 
		0xE8BA, 0xF115, 0xFC94, 0x0935, 0x14F6, 0x1DD5, 0x21D0, 0x20D4, 0x1CB5, 
		0x1650, 0x0E84, 0x062D, 0xFE29, 0xF755, 0xF28E, 0xF18B, 0xF3CD, 0xF6DC, 
		0xF842, 0xF700, 0xF484, 0xF1F8, 0xF084, 0xF084, 0xF084, 0xF084, 0xF084, 
		0xF084, 0xF084, 0xF084, 0xF084, 0xF084, 0xF084, 0xF084, 0xF09F, 0xF0C5, 
		0xF0F3, 0xF127, 0xF15D, 0xF194, 0xF1C9, 0xF1FA, 0xF223, 0xF243, 0xF251, 
		0xF24D, 0xF23F, 0xF22E, 0xF224, 0xF228, 0xF243, 0xF281, 0xF2DF, 0xF34E, 
		0xF3BF, 0xF423, 0xF469, 0xF484, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0072, 0x0110, 0x01D0, 0x02A6, 0x038A, 0x046F, 0x054C, 0x0616, 
		0x06C3, 0x0748, 0x0792, 0x07A0, 0x0788, 0x075F, 0x0739, 0x072A, 0x0748, 
		0x07A2, 0x0829, 0x08C9, 0x096B, 0x09FA, 0x0A60, 0x0A87, 0x09FB, 0x0DC1, 
		0x12E2, 0x186C, 0x1D6E, 0x20F6, 0x233F, 0x252E, 0x26CB, 0x281E, 0x292F, 
		0x2A06, 0x2AAB, 0x2B25, 0x2B34, 0x2AB1, 0x29CC, 0x28B3, 0x2798, 0x26AA, 
		0x25E0, 0x2514, 0x2445, 0x2372, 0x229E, 0x21C6, 0x2116, 0x209C, 0x202D, 
		0x1FA1, 0x1ECD, 0x1D89, 0x1BAA, 0x1930, 0x1644, 0x12FE, 0x0F74, 0x0BBC, 
		0x07EC, 0x041A, 0x005E, 0xFC61, 0xF803, 0xF3A6, 0xEFA9, 0xEBFE, 0xE87D, 
		0xE56A, 0xE308, 0xE4CA, 0xE448, 0xE263, 0xE417, 0xE4C5, 0xE2BB, 0xE23B, 
		0xE34F, 0xE42C, 0xE347, 0xE308, 0xE4AE, 0xE694, 0xE8A8, 0xEAD8, 0xED10, 
		0xEF3F, 0xF151, 0xF336, 0xF4D9, 0xF629, 0xF6E5, 0xF702, 0xF6B9, 0xF644, 
		0xF5DF, 0xF5C2, 0xF629, 0xF717, 0xF858, 0xF9D8, 0xFB7F, 0xFD37, 0xFEE9, 
		0x007E, 0x0279, 0xFFFE, 0xFDDA, 0xFEDE, 0x00E1, 0x0203, 0xFE15, 0xFF73, 
		0x0116, 0xFF01, 0x00DB, 0x0036, 0xFF25, 0xFE8B, 0x00A0, 0xD8A9, 0x9C57, 
		0x7BDC, 0x008B, 0xFFD2, 0xFF6F, 0xF976, 0xF431, 0xF15A, 0x0001, 0xFFFE, 
		0xC170, 0xFD69, 0x0343, 0x0B1C, 0x1362, 0x1A84, 0x1EF3, 0x20EB, 0x21DB, 
		0x2200, 0x2195, 0x20D6, 0x1FFE, 0x1F49, 0x1EF3, 0x1EE0, 0x1ECC, 0x1EB8, 
		0x1EA3, 0x1E8D, 0x1E77, 0x1E60, 0x1E48, 0x1E31, 0x1E19, 0x1E00, 0x1DE7, 
		0x1DCF, 0x1DB5, 0x1D9C, 0x1D83, 0x1D6A, 0x1D50, 0x1D37, 0x1D1E, 0x1D05, 
		0x1CEC, 0x1CD3, 0x1CBB, 0x1CA3, 0x1C8C, 0x1C74, 0x1C5E, 0x1C48, 0x1C32, 
		0x1C1D, 0x1C09, 0x1BF6, 0x1BE3, 0x1BD1, 0x1BC3, 0x1BBC, 0x1BBB, 0x1BBD, 
		0x1BC2, 0x1BC9, 0x1BCF, 0x1BD5, 0x1BD8, 0x1BD7, 0x1BD1, 0x1BC8, 0x1BBC, 
		0x1BB0, 0x1BA2, 0x1B93, 0x1B84, 0x1B73, 0x1B63, 0x1B51, 0x1B40, 0x1B2F, 
		0x1B1E, 0x1B0D, 0x1AFD, 0x1AED, 0x1ADF, 0x1AD1, 0x1AC5, 0x1ABA, 0x1AB1, 
		0x1AA9, 0x1AA3, 0x1AA0, 0x1A9F, 0xD4E5, 0xDA16, 0xE10C, 0xE862, 0xEEB6, 
		0xF2A5, 0xF467, 0xF543, 0xF56D, 0xF516, 0xF471, 0xF3B0, 0xF306, 0xF2A5, 
		0xF278, 0xF24A, 0xF21A, 0xF1E9, 0xF1B6, 0xF182, 0xF14C, 0xF116, 0xF0DF, 
		0xF0A6, 0xF06D, 0xF034, 0xEFF9, 0xEFBF, 0xEF84, 0xEF49, 0xEF0D, 0xEED2, 
		0xEE97, 0xEE5C, 0xEE22, 0xEDE8, 0xEDAE, 0xED76, 0xED3E, 0xED07, 0xECD1, 
		0xEC9C, 0xEC68, 0xEC36, 0xEC05, 0xEBD6, 0xEBA9, 0xEB7D, 0xEB53, 0xEB34, 
		0xEB23, 0xEB1F, 0xEB24, 0xEB30, 0xEB3F, 0xEB4F, 0xEB5C, 0xEB63, 0xEB61, 
		0xEB53, 0xEB3D, 0xEB23, 0xEB06, 0xEAE6, 0xEAC3, 0xEA9F, 0xEA79, 0xEA51, 
		0xEA29, 0xEA01, 0xE9D8, 0xE9B0, 0xE989, 0xE963, 0xE93F, 0xE91D, 0xE8FD, 
		0xE8E1, 0xE8C7, 0xE8B1, 0xE8A0, 0xE893, 0xE88A, 0xE888, 0xCF81, 0xC247, 
		0xB08D, 0x9DDD, 0x8DBE, 0x83BB, 0x7F3B, 0x7CFE, 0x7C86, 0x7D57, 0x7EF5, 
		0x80E4, 0x82A4, 0x83BB, 0x8457, 0x84F9, 0x85A1, 0x864F, 0x8701, 0x87B9, 
		0x8874, 0x8933, 0x89F6, 0x8ABB, 0x8B83, 0x8C4E, 0x8D1A, 0x8DE8, 0x8EB7, 
		0x8F87, 0x9057, 0x9126, 0x91F6, 0x92C4, 0x9392, 0x945D, 0x9527, 0x95EE, 
		0x96B2, 0x9773, 0x9831, 0x98EA, 0x999F, 0x9A4F, 0x9AFA, 0x9BA0, 0x9C3F, 
		0x9CD9, 0x9D6B, 0x9DDB, 0x9E15, 0x9E23, 0x9E10, 0x9DE7, 0x9DB2, 0x9D7B, 
		0x9D4E, 0x9D36, 0x9D3C, 0x9D6B, 0x9DBA, 0x9E15, 0x9E7C, 0x9EEC, 0x9F65, 
		0x9FE6, 0xA06B, 0xA0F5, 0xA182, 0xA210, 0xA29E, 0xA32A, 0xA3B4, 0xA439, 
		0xA4B8, 0xA530, 0xA59F, 0xA604, 0xA65D, 0xA6AA, 0xA6E7, 0xA715, 0xA732, 
		0xA73C, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0xCA4C, 0xCA45, 0xCA3B, 0xCA2C, 0xCA19, 0xCA02, 0xC9E8, 0xC9CA, 
		0xC9A9, 0xC985, 0xC95E, 0xC934, 0xC907, 0xC8D7, 0xC8A6, 0xC871, 0xC83B, 
		0xC803, 0xC7C9, 0xC78D, 0xC750, 0xC712, 0xC6D2, 0xC691, 0xC64F, 0xC60C, 
		0xC5C9, 0xC586, 0xC542, 0xC4FD, 0xC4B9, 0xC475, 0xC431, 0xC3EE, 0xC3AB, 
		0xC369, 0xC328, 0xC2E8, 0xC2A9, 0xC26B, 0xC22F, 0xC1F5, 0xC1BC, 0xC185, 
		0xC151, 0xC11E, 0xC0EE, 0xC0C1, 0xC096, 0xC075, 0xC065, 0xC062, 0xC069, 
		0xC076, 0xC086, 0xC096, 0xC0A3, 0xC0AA, 0xC0A6, 0xC096, 0xC07B, 0xC05C, 
		0xC03A, 0xC013, 0xBFEB, 0xBFBF, 0xBF92, 0xBF63, 0xBF34, 0xBF04, 0xBED4, 
		0xBEA5, 0xBE76, 0xBE49, 0xBE1E, 0xBDF6, 0xBDD0, 0xBDAE, 0xBD90, 0xBD76, 
		0xBD61, 0xBD52, 0xBD48, 0xBD45, 0xFC2F, 0xF279, 0xE576, 0xD7BD, 0xCBE7, 
		0xC48D, 0xC14D, 0xBFC6, 0xBF93, 0xC04E, 0xC191, 0xC2F5, 0xC416, 0xC48D, 
		0xF897, 0xF652, 0xF347, 0xF013, 0xED4F, 0xEB97, 0xEAD5, 0xEA79, 0xEA6E, 
		0xEA99, 0xEAE5, 0xEB38, 0xEB7B, 0xEB97, 0xEE31, 0xEFDA, 0xF214, 0xF46C, 
		0xF671, 0xF7B3, 0xF841, 0xF884, 0xF88D, 0xF86D, 0xF836, 0xF7F9, 0xF7C7, 
		0xF7B3, 0x0001, 0xFFFE, 0xC170, 0x03CB, 0xFFFA, 0xFADC, 0xF577, 0xF0CF, 
		0xEDEB, 0xECA9, 0xEC1D, 0xEC19, 0xEC71, 0xECF9, 0xED82, 0xEDE2, 0xEDEB, 
		0xEDB8, 0xED84, 0xED4D, 0xED15, 0xECDB, 0xECA0, 0xEC63, 0xEC25, 0xEBE6, 
		0xEBA6, 0xEB65, 0xEB24, 0xEAE1, 0xEA9F, 0xEA5C, 0xEA18, 0xE9D5, 0xE992, 
		0xE94E, 0xE90C, 0xE8C9, 0xE887, 0xE846, 0xE805, 0xE7C6, 0xE787, 0xE74A, 
		0xE70E, 0xE6D3, 0xE69A, 0xE662, 0xE62D, 0xE5F9, 0xE5C7, 0xE598, 0xE574, 
		0xE561, 0xE55C, 0xE562, 0xE570, 0xE581, 0xE593, 0xE5A1, 0xE5A9, 0xE5A7, 
		0xE598, 0xE57F, 0xE561, 0xE540, 0xE51B, 0xE4F4, 0xE4CA, 0xE49F, 0xE472, 
		0xE445, 0xE417, 0xE3E9, 0xE3BB, 0xE38F, 0xE364, 0xE33A, 0xE314, 0xE2EF, 
		0xE2CF, 0xE2B2, 0xE299, 0xE285, 0xE276, 0xE26D, 0xE26A, 0x297D, 0x2380, 
		0x1B7B, 0x1306, 0x0BBB, 0x0733, 0x052D, 0x0432, 0x0405, 0x046C, 0x052C, 
		0x060A, 0x06CA, 0x0733, 0x075C, 0x0787, 0x07B3, 0x07E1, 0x0810, 0x0840, 
		0x0872, 0x08A4, 0x08D7, 0x090C, 0x0940, 0x0976, 0x09AC, 0x09E2, 0x0A19, 
		0x0A50, 0x0A87, 0x0ABD, 0x0AF4, 0x0B2B, 0x0B61, 0x0B97, 0x0BCC, 0x0C00, 
		0x0C34, 0x0C67, 0x0C99, 0x0CCA, 0x0CFA, 0x0D28, 0x0D55, 0x0D81, 0x0DAB, 
		0x0DD4, 0x0DFA, 0x0E18, 0x0E27, 0x0E2B, 0x0E26, 0x0E1B, 0x0E0D, 0x0DFF, 
		0x0DF3, 0x0DEC, 0x0DEE, 0x0DFA, 0x0E0F, 0x0E27, 0x0E42, 0x0E60, 0x0E80, 
		0x0EA2, 0x0EC5, 0x0EEA, 0x0F0F, 0x0F34, 0x0F5A, 0x0F7F, 0x0FA3, 0x0FC6, 
		0x0FE8, 0x1007, 0x1025, 0x103F, 0x1057, 0x106B, 0x107B, 0x1088, 0x108F, 
		0x1092, 0xC8B9, 0xBDF1, 0xAF7F, 0xA043, 0x9320, 0x8AF6, 0x8755, 0x8598, 
		0x8550, 0x8612, 0x8771, 0x88FF, 0x8A50, 0x8AF6, 0x8B25, 0x8B55, 0x8B87, 
		0x8BBB, 0x8BF0, 0x8C26, 0x8C5E, 0x8C97, 0x8CD0, 0x8D0B, 0x8D47, 0x8D83, 
		0x8DC0, 0x8DFD, 0x8E3A, 0x8E78, 0x8EB6, 0x8EF4, 0x8F31, 0x8F6F, 0x8FAC, 
		0x8FE8, 0x9024, 0x905F, 0x909A, 0x90D3, 0x910B, 0x9142, 0x9178, 0x91AD, 
		0x91DF, 0x9211, 0x9240, 0x926E, 0x9299, 0x92BA, 0x92CC, 0x92D0, 0x92CA, 
		0x92BE, 0x92AE, 0x929E, 0x9291, 0x9289, 0x928B, 0x9299, 0x92B0, 0x92CC, 
		0x92EA, 0x930C, 0x9330, 0x9356, 0x937E, 0x93A7, 0x93D0, 0x93FB, 0x9425, 
		0x944F, 0x9477, 0x949F, 0x94C5, 0x94E8, 0x9509, 0x9527, 0x9542, 0x9559, 
		0x956B, 0x9579, 0x9581, 0x9584, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xC7DE, 0xC7E1, 0xC7E6, 0xC7EE, 0xC7F7, 
		0xC803, 0xC810, 0xC81E, 0xC82F, 0xC841, 0xC855, 0xC86A, 0xC880, 0xC898, 
		0xC8B1, 0xC8CB, 0xC8E6, 0xC902, 0xC91F, 0xC93D, 0xC95C, 0xC97B, 0xC99B, 
		0xC9BB, 0xC9DC, 0xC9FD, 0xCA1F, 0xCA41, 0xCA63, 0xCA85, 0xCAA7, 0xCAC9, 
		0xCAEB, 0xCB0D, 0xCB2E, 0xCB4F, 0xCB70, 0xCB90, 0xCBAF, 0xCBCE, 0xCBEC, 
		0xCC09, 0xCC26, 0xCC41, 0xCC5B, 0xCC75, 0xCC8D, 0xCCA3, 0xCCB9, 0xCCC9, 
		0xCCD1, 0xCCD2, 0xCCCF, 0xCCC9, 0xCCC0, 0xCCB8, 0xCCB2, 0xCCAF, 0xCCB1, 
		0xCCB9, 0xCCC6, 0xCCD5, 0xCCE7, 0xCCFA, 0xCD0E, 0xCD24, 0xCD3B, 0xCD52, 
		0xCD6A, 0xCD82, 0xCD9A, 0xCDB1, 0xCDC9, 0xCDDF, 0xCDF5, 0xCE09, 0xCE1C, 
		0xCE2D, 0xCE3C, 0xCE49, 0xCE53, 0xCE5B, 0xCE60, 0xCE61, 0x0321, 0x0B1B, 
		0x15CC, 0x2111, 0x2AC9, 0x30D3, 0x3375, 0x349F, 0x34AD, 0x33FA, 0x32E2, 
		0x31C1, 0x30F3, 0x30D3, 0x312B, 0x3186, 0x31E4, 0x3246, 0x32AA, 0x3311, 
		0x337B, 0x33E6, 0x3453, 0x34C3, 0x3533, 0x35A5, 0x3618, 0x368C, 0x3700, 
		0x3775, 0x37EA, 0x385F, 0x38D3, 0x3947, 0x39BB, 0x3A2D, 0x3A9F, 0x3B0F, 
		0x3B7D, 0x3BE9, 0x3C54, 0x3CBC, 0x3D22, 0x3D85, 0x3DE5, 0x3E42, 0x3E9C, 
		0x3EF2, 0x3F45, 0x3F84, 0x3FA4, 0x3FAC, 0x3FA1, 0x3F8A, 0x3F6C, 0x3F4E, 
		0x3F34, 0x3F27, 0x3F2A, 0x3F45, 0x3F71, 0x3FA4, 0x3FDE, 0x401D, 0x4061, 
		0x40A9, 0x40F5, 0x4142, 0x4191, 0x41E1, 0x4231, 0x4280, 0x42CD, 0x4318, 
		0x435F, 0x43A3, 0x43E1, 0x441A, 0x444C, 0x4477, 0x449A, 0x44B4, 0x44C4, 
		0x44CA, 0x002C, 0x009D, 0x0134, 0x01D4, 0x025E, 0x02B3, 0x02D9, 0x02EB, 
		0x02ED, 0x02E5, 0x02D6, 0x02C6, 0x02B9, 0x02B3, 0xF5F1, 0xF79D, 0xF9DC, 
		0xFC39, 0xFE44, 0xFF88, 0x0018, 0x005B, 0x0064, 0x0044, 0x000C, 0xFFCF, 
		0xFF9D, 0xFF88, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xBF5E, 
		0xD649, 0xD649, 0xD649, 0xD649, 0xD649, 0xD649, 0xD64B, 0xD64E, 0xD652, 
		0xD655, 0xD657, 0xD657, 0xD652, 0xD649, 0xD63D, 0xD62F, 0xD620, 0xD610, 
		0xD5FF, 0xD5EE, 0xD5DC, 0xD5C9, 0xD5B6, 0xD5A2, 0xD58E, 0xD57A, 0xD566, 
		0xD552, 0xD53E, 0xD52A, 0xD517, 0xD504, 0xD4F1, 0xD4DF, 0xD4CE, 0xD4BE, 
		0xD4AE, 0xD4A0, 0xD492, 0xD486, 0xD47B, 0xD472, 0xD46A, 0xD464, 0xD45F, 
		0xD45C, 0xD45B, 0xD549, 0xD649, 0xD644, 0xD5F9, 0xD580, 0xD4F0, 0xD461, 
		0xD3EB, 0xD3A5, 0xD3A7, 0xD409, 0xD4E1, 0xD649, 0xD850, 0xDAED, 0xDE11, 
		0xE1AB, 0xE5AE, 0xEA0A, 0xEEAF, 0xF38E, 0xF897, 0x0950, 0x0AD4, 0x0B60, 
		0x0B3D, 0x0AAF, 0x09FF, 0x0972, 0x0950, 0x0990, 0x09F0, 0x0A63, 0x0AD7, 
		0x0B3D, 0x0B86, 0x0BA2, 0xEC40, 0xEC40, 0xEC40, 0xEC40, 0xEC40, 0xEC40, 
		0xEC40, 0xEC40, 0xEC41, 0xEC41, 0xEC42, 0xEC42, 0xEC41, 0xEC40, 0xEC3E, 
		0xEC3C, 0xEC3A, 0xEC38, 0xEC36, 0xEC33, 0xEC31, 0xEC2E, 0xEC2B, 0xEC29, 
		0xEC26, 0xEC23, 0xEC20, 0xEC1D, 0xEC1B, 0xEC18, 0xEC15, 0xEC13, 0xEC10, 
		0xEC0E, 0xEC0B, 0xEC09, 0xEC07, 0xEC05, 0xEC03, 0xEC01, 0xEC00, 0xEBFE, 
		0xEBFD, 0xEBFC, 0xEBFC, 0xEBFB, 0xEBFB, 0xEC1C, 0xEC40, 0xEC3C, 0xEC28, 
		0xEC0B, 0xEBE9, 0xEBC9, 0xEBAE, 0xEB9F, 0xEBA0, 0xEBB8, 0xEBEC, 0xEC40, 
		0xECC5, 0xED80, 0xEE63, 0xEF62, 0xF070, 0xF181, 0xF287, 0xF376, 0xF441, 
		0xF354, 0xF33A, 0xF327, 0xF31B, 0xF319, 0xF322, 0xF335, 0xF354, 0xF38E, 
		0xF3E4, 0xF44B, 0xF4B3, 0xF50E, 0xF550, 0xF568, 0xB53F, 0xB449, 0xB2F0, 
		0xB16A, 0xAFEE, 0xAEB0, 0xAD87, 0xAC37, 0xAADA, 0xA98B, 0xA864, 0xA782, 
		0xA6FD, 0xA6F2, 0xA732, 0xA77B, 0xA7CD, 0xA828, 0xA88B, 0xA8F6, 0xA967, 
		0xA9E0, 0xAA5E, 0xAAE2, 0xAB6A, 0xABF8, 0xAC89, 0xAD1E, 0xADB6, 0xAE50, 
		0xAEEC, 0xAF89, 0xB028, 0xB0C6, 0xB165, 0xB203, 0xB2A0, 0xB33B, 0xB3D3, 
		0xB46A, 0xB4FC, 0xB58B, 0xB616, 0xB69C, 0xB71D, 0xB798, 0xB80D, 0xB762, 
		0xB66E, 0xB66D, 0xB69F, 0xB6F3, 0xB758, 0xB7BD, 0xB811, 0xB844, 0xB844, 
		0xB801, 0xB76A, 0xB66E, 0xB543, 0xB410, 0xB2B0, 0xB0FC, 0xAECF, 0xAC01, 
		0xA86C, 0xA3EB, 0x9E57, 0x78C4, 0x7563, 0x7436, 0x7498, 0x75E3, 0x7772, 
		0x789E, 0x78C4, 0x77E1, 0x768A, 0x74F6, 0x735B, 0x71F1, 0x70EF, 0x708D, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x263C, 0x28D4, 0x2C4F, 
		0x2FFA, 0x3323, 0x351A, 0x360D, 0x36A6, 0x36F1, 0x36F5, 0x36BF, 0x3657, 
		0x35C7, 0x351A, 0x345D, 0x3396, 0x32C6, 0x31ED, 0x310D, 0x3026, 0x2F39, 
		0x2E46, 0x2D4F, 0x2C53, 0x2B54, 0x2A52, 0x294F, 0x284A, 0x2744, 0x263F, 
		0x253A, 0x2436, 0x2335, 0x2237, 0x213C, 0x2046, 0x1F55, 0x1E69, 0x1D83, 
		0x1CA5, 0x1BCE, 0x1B00, 0x1A3B, 0x1980, 0x18D0, 0x182A, 0x1791, 0x1BF3, 
		0x20FB, 0x2186, 0x21BF, 0x21B9, 0x2185, 0x2136, 0x20DC, 0x208B, 0x2053, 
		0x2048, 0x207A, 0x20FB, 0x2613, 0x29E0, 0x2757, 0x23C6, 0x1F90, 0x1B14, 
		0x16B4, 0x12CF, 0x0FC8, 0x0DFE, 0x0D47, 0x0D46, 0x0E0A, 0x0FA7, 0x122C, 
		0x15AC, 0x1A37, 0x206F, 0x287D, 0x31BB, 0x3B81, 0x452B, 0x4E10, 0x558C, 
		0x5852, 0x576D, 0x52E6, 0x53CC, 0x5594, 0x5752, 0x581B, 0x5587, 0x52E6, 
		0x5538, 0x57A7, 0x572B, 0x55E6, 0x547D, 0x5394, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0001, 0x0005, 0x000B, 0x000F, 0x0012, 0x0011, 
		0x000C, 0x0000, 0xFFF0, 0xFFE2, 0xFFD4, 0xFFC8, 0xFFBB, 0xFFB0, 0xFFA4, 
		0xFF98, 0xFF8C, 0xFF80, 0xFF73, 0xFF66, 0xFF58, 0xFF48, 0xFF38, 0xFF26, 
		0xFF12, 0xFEFD, 0xFEE5, 0xFECC, 0xFEB0, 0xFE92, 0xFE71, 0xFE4E, 0xFE27, 
		0xFDFE, 0xFDD1, 0xFD76, 0xFCD7, 0xFC11, 0xFB40, 0xFA84, 0xF9F8, 0xFA1E, 
		0xFA7F, 0xFA82, 0xFA79, 0xFA68, 0xFA52, 0xFA3C, 0xFA28, 0xFA1C, 0xFA1B, 
		0xFA29, 0xFA49, 0xFA7F, 0xFAD6, 0xFB4D, 0xFBDE, 0xFC80, 0xFD2C, 0xFDD9, 
		0xFE80, 0xFF18, 0xFF9B, 0xFFFF, 0x003C, 0x0054, 0x0051, 0x003C, 0x0021, 
		0x000A, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0001, 0x0001, 0x0001, 0xFFFF, 0x0000, 
		0xFFFE, 0xFFFB, 0xFFF8, 0xFFF3, 0xFFEE, 0xFFE9, 0xFFE3, 0xFFDD, 0xFFD7, 
		0xFFD0, 0xFFCA, 0xFFC4, 0xFFBF, 0xFFBA, 0xFFB5, 0xFFB1, 0xFFAE, 0xFFAC, 
		0xFFAB, 0xFFAB, 0xFFAD, 0xFFB0, 0xFFB4, 0xFFBB, 0xFFC3, 0xFFCD, 0xFFD9, 
		0xFFFD, 0x0045, 0x00A4, 0x010A, 0x0168, 0x01B0, 0x01B3, 0x0199, 0x0199, 
		0x019D, 0x01A2, 0x01A8, 0x01AF, 0x01B4, 0x01B7, 0x01B7, 0x01B3, 0x01A9, 
		0x0199, 0x0180, 0x015D, 0x0133, 0x0104, 0x00D2, 0x00A0, 0x006F, 0x0043, 
		0x001D, 0xFFFF, 0xFFEE, 0xFFE7, 0xFFE8, 0xFFEE, 0xFFF6, 0xFFFD, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xBE3A, 0xBBA2, 0xB827, 0xB47C, 0xB153, 
		0xAF5C, 0xAE6B, 0xADD6, 0xAD92, 0xAD92, 0xADCC, 0xAE33, 0xAEBC, 0xAF5C, 
		0xB003, 0xB0AC, 0xB156, 0xB202, 0xB2B1, 0xB361, 0xB415, 0xB4CC, 0xB586, 
		0xB643, 0xB705, 0xB7CB, 0xB895, 0xB965, 0xBA39, 0xBB13, 0xBBF3, 0xBCD9, 
		0xBDC5, 0xBEB7, 0xBFB1, 0xC0B2, 0xC1BA, 0xC2CA, 0xC3E3, 0xC504, 0xC62D, 
		0xC7F1, 0xCA9B, 0xCDC5, 0xD10A, 0xD403, 0xD649, 0xD5E5, 0xD48B, 0xD482, 
		0xD4A5, 0xD4E6, 0xD535, 0xD587, 0xD5CC, 0xD5F7, 0xD5FA, 0xD5C8, 0xD552, 
		0xD48B, 0xD350, 0xD19C, 0xCF8B, 0xCD3C, 0xCAC9, 0xC851, 0xC5F0, 0xC3C3, 
		0xC1E7, 0xC078, 0xBFCA, 0xBFE4, 0xC071, 0xC11B, 0xC18E, 0xC174, 0xC078, 
		0xBE25, 0xBAA0, 0xB678, 0xB240, 0xAE89, 0xABE3, 0xAAE1, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xBF5E, 0x1B27, 0x1B76, 0x1BDF, 0x1C4D, 
		0x1CAD, 0x1CE8, 0x1D01, 0x1D0A, 0x1D09, 0x1D00, 0x1CF4, 0x1CE9, 0x1CE4, 
		0x1CE8, 0x1CF3, 0x1CFE, 0x1D0B, 0x1D18, 0x1D27, 0x1D35, 0x1D45, 0x1D55, 
		0x1D65, 0x1D76, 0x1D86, 0x1D97, 0x1DA8, 0x1DBA, 0x1DCA, 0x1DDB, 0x1DEC, 
		0x1DFC, 0x1E0C, 0x1E1B, 0x1E29, 0x1E37, 0x1E44, 0x1E51, 0x1E5C, 0x1E66, 
		0x1E70, 0x1E78, 0x1E7E, 0x1E84, 0x1E88, 0x1E8A, 0x1E8B, 0x1DC1, 0x1CE8, 
		0x1CF9, 0x1D5A, 0x1DEF, 0x1E9C, 0x1F46, 0x1FD1, 0x2021, 0x201A, 0x1FA1, 
		0x1E99, 0x1CE8, 0x1A41, 0x1694, 0x1221, 0x0D25, 0x07DE, 0x028B, 0xFD6A, 
		0xF8B8, 0xF4B5, 0xF19E, 0xEFC0, 0xEF05, 0xEF20, 0xEFC0, 0xF094, 0xF14F, 
		0xF19E, 0x1105, 0x1062, 0x0F89, 0x0EA4, 0x0DDE, 0x0D63, 0x0D2D, 0x0D13, 
		0x0D0F, 0x0D1B, 0x0D30, 0x0D47, 0x0D5A, 0x0D63, 0x0D65, 0x0D67, 0x0D68, 
		0x0D6A, 0x0D6D, 0x0D6F, 0x0D71, 0x0D73, 0x0D76, 0x0D78, 0x0D7B, 0x0D7D, 
		0x0D80, 0x0D82, 0x0D85, 0x0D87, 0x0D8A, 0x0D8C, 0x0D8F, 0x0D91, 0x0D93, 
		0x0D95, 0x0D97, 0x0D99, 0x0D9B, 0x0D9C, 0x0D9D, 0x0D9F, 0x0DA0, 0x0DA0, 
		0x0DA1, 0x0DA1, 0x0DA2, 0x0D84, 0x0D63, 0x0D66, 0x0D74, 0x0D8A, 0x0DA4, 
		0x0DBD, 0x0DD2, 0x0DDE, 0x0DDD, 0x0DCB, 0x0DA4, 0x0D63, 0x0CFE, 0x0C73, 
		0x0BC9, 0x0B0C, 0x0A43, 0x0978, 0x08B5, 0x0802, 0x076A, 0x06F4, 0x06AD, 
		0x0691, 0x0695, 0x06AD, 0x06CD, 0x06E8, 0x06F4, 0xAC54, 0xAC79, 0xAC9A, 
		0xACA2, 0xAC7A, 0xAC0C, 0xAB37, 0xAA06, 0xA8A0, 0xA72B, 0xA5D1, 0xA4B7, 
		0xA406, 0xA3E6, 0xA41F, 0xA463, 0xA4B0, 0xA505, 0xA564, 0xA5CA, 0xA637, 
		0xA6AB, 0xA725, 0xA7A5, 0xA82A, 0xA8B3, 0xA941, 0xA9D2, 0xAA66, 0xAAFD, 
		0xAB96, 0xAC2F, 0xACCA, 0xAD65, 0xAE00, 0xAE9B, 0xAF34, 0xAFCB, 0xB05F, 
		0xB0F1, 0xB180, 0xB20A, 0xB290, 0xB311, 0xB38D, 0xB402, 0xB471, 0xB3A5, 
		0xB290, 0xB2B6, 0xB354, 0xB43F, 0xB54E, 0xB656, 0xB72B, 0xB7A3, 0xB794, 
		0xB6D3, 0xB536, 0xB290, 0xAE6E, 0xA8B3, 0xA1C2, 0x99FC, 0x91C2, 0x8974, 
		0x8174, 0x7A20, 0x73DE, 0x6F0D, 0x6C22, 0x6B00, 0x6B29, 0x6C22, 0x6D6E, 
		0x6E91, 0x6F0D, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x1FDB, 0x23D9, 0x2933, 0x2ED8, 0x33B6, 0x36BC, 0x3827, 
		0x38FA, 0x394D, 0x3938, 0x38D4, 0x3838, 0x377E, 0x36BC, 0x35F9, 0x352E, 
		0x345A, 0x337E, 0x329A, 0x31B1, 0x30C1, 0x2FCC, 0x2ED2, 0x2DD4, 0x2CD3, 
		0x2BCF, 0x2AC9, 0x29C1, 0x28B8, 0x27AF, 0x26A7, 0x25A0, 0x249A, 0x2396, 
		0x2296, 0x2199, 0x20A0, 0x1FAD, 0x1EBE, 0x1DD6, 0x1CF5, 0x1C1B, 0x1B49, 
		0x1A80, 0x19C0, 0x190A, 0x185F, 0x1BE8, 0x2010, 0x2082, 0x20B1, 0x20AC, 
		0x2081, 0x2040, 0x1FF7, 0x1FB5, 0x1F88, 0x1F7E, 0x1FA7, 0x2010, 0x2446, 
		0x2751, 0x24FD, 0x21C4, 0x1DFA, 0x19F7, 0x1610, 0x129D, 0x0FF2, 0x0E66, 
		0x0DD1, 0x0DE0, 0x0EA4, 0x102F, 0x1294, 0x15E6, 0x1A37, 0x201C, 0x27BB, 
		0x3076, 0x39B4, 0x42D9, 0x4B4A, 0x526C, 0x5544, 0x54CD, 0x5399, 0x51C0, 
		0x50E3, 0x5338, 0x5595, 0x51AB, 0x53A0, 0x5595, 0x5490, 0x52AC, 0x51AB, 
		0x53B1, 0x55B3, 0x0008, 0x001F, 0x003D, 0x005D, 0x0079, 0x008A, 0x0091, 
		0x0092, 0x008F, 0x008B, 0x0086, 0x0083, 0x0084, 0x008A, 0x0096, 0x00A5, 
		0x00B8, 0x00CE, 0x00E7, 0x0102, 0x011E, 0x013B, 0x015A, 0x0178, 0x0196, 
		0x01B4, 0x01D0, 0x01EA, 0x0203, 0x0218, 0x022B, 0x023A, 0x0245, 0x024B, 
		0x024C, 0x0248, 0x023E, 0x022D, 0x0215, 0x01F6, 0x01CF, 0x014E, 0x0044, 
		0xFEE7, 0xFD6E, 0xFC0F, 0xFAFF, 0xFADC, 0xFB24, 0xFB22, 0xFB17, 0xFB06, 
		0xFAF3, 0xFAE0, 0xFAD1, 0xFAC8, 0xFAC9, 0xFAD7, 0xFAF4, 0xFB24, 0xFB70, 
		0xFBD8, 0xFC56, 0xFCE3, 0xFD79, 0xFE10, 0xFEA1, 0xFF26, 0xFF98, 0xFFEF, 
		0x0023, 0x0034, 0x002E, 0x0019, 0x0001, 0xFFF0, 0xFFEF, 0xFFFF, 0x001A, 
		0x0039, 0x0057, 0x0073, 0x0086, 0x008D, 0xFF32, 0xFF3B, 0xFF46, 0xFF53, 
		0xFF5D, 0xFF64, 0xFF68, 0xFF6E, 0xFF74, 0xFF79, 0xFF7B, 0xFF79, 0xFF71, 
		0xFF64, 0xFF51, 0xFF3D, 0xFF26, 0xFF0E, 0xFEF5, 0xFEDA, 0xFEBE, 0xFEA1, 
		0xFE84, 0xFE66, 0xFE48, 0xFE2B, 0xFE0D, 0xFDF0, 0xFDD4, 0xFDB8, 0xFD9E, 
		0xFD85, 0xFD6E, 0xFD58, 0xFD45, 0xFD34, 0xFD25, 0xFD19, 0xFD0F, 0xFD09, 
		0xFD06, 0xFD25, 0xFD77, 0xFDE8, 0xFE67, 0xFEDF, 0xFF3E, 0xFF66, 0xFF69, 
		0xFF6C, 0xFF6E, 0xFF70, 0xFF71, 0xFF72, 0xFF71, 0xFF71, 0xFF70, 0xFF6E, 
		0xFF6C, 0xFF69, 0xFF66, 0xFF61, 0xFF5B, 0xFF54, 0xFF4D, 0xFF46, 0xFF3F, 
		0xFF39, 0xFF34, 0xFF30, 0xFF2D, 0xFF2A, 0xFF29, 0xFF29, 0xFF2A, 0xFF2C, 
		0xFF30, 0xFF35, 0xFF3E, 0xFF49, 0xFF54, 0xFF5D, 0xFF64, 0xFF67, 0xC7EF, 
		0xC313, 0xBC90, 0xB5B2, 0xAFC6, 0xAC18, 0xAA67, 0xA97B, 0xA930, 0xA961, 
		0xA9E8, 0xAAA2, 0xAB69, 0xAC18, 0xACB0, 0xAD4A, 0xADE4, 0xAE81, 0xAF20, 
		0xAFC1, 0xB064, 0xB10A, 0xB1B4, 0xB260, 0xB311, 0xB3C5, 0xB47D, 0xB53A, 
		0xB5FB, 0xB6C1, 0xB78C, 0xB85D, 0xB933, 0xBA0F, 0xBAF2, 0xBBDB, 0xBCCA, 
		0xBDC1, 0xBEBE, 0xBFC4, 0xC0D0, 0xC25C, 0xC4AA, 0xC76A, 0xCA4E, 0xCD07, 
		0xCF46, 0xD021, 0xD00F, 0xD01F, 0xD030, 0xD040, 0xD04E, 0xD059, 0xD05F, 
		0xD060, 0xD059, 0xD04B, 0xD032, 0xD00F, 0xCFDA, 0xCF91, 0xCF39, 0xCED5, 
		0xCE6C, 0xCE02, 0xCD9C, 0xCD3F, 0xCCEF, 0xCCB1, 0xCCD7, 0xCD79, 0xCE44, 
		0xCEE7, 0xCF11, 0xCE6F, 0xCCB1, 0xC90E, 0xC389, 0xBD08, 0xB66C, 0xB09A, 
		0xAC75, 0xAAE1,
	},
	{
		0x0001, 0x0000, 0x0053, 0x0001, 0x0043, 0x0054, 0x0001, 0x0097, 0x0001, 
		0x0098, 0x0001, 0x0099, 0x0054, 0x009A, 0x0054, 0x00EE, 0x0054, 0x0142, 
		0x0054, 0x0196, 0x0054, 0x01EA, 0x0063, 0x023E, 0x0003, 0x02A1, 0x0003, 
		0x02A4, 0x0003, 0x02A7, 0x0001, 0x02AA, 0x0001, 0x02AB, 0x0001, 0x02AC, 
		0x0054, 0x02AD, 0x0054, 0x0301, 0x0054, 0x0355, 0x0063, 0x03A9, 0x0063, 
		0x040C, 0x0054, 0x046F, 0x000E, 0x04C3, 0x000E, 0x04D1, 0x000E, 0x04DF, 
		0x0001, 0x04ED, 0x0001, 0x04EE, 0x0001, 0x04EF, 0x0054, 0x04F0, 0x0054, 
		0x0544, 0x0054, 0x0598, 0x0063, 0x05EC, 0x0063, 0x064F, 0x0054, 0x06B2, 
		0x0054, 0x0706, 0x000E, 0x075A, 0x000E, 0x0768, 0x0054, 0x0776, 0x0054, 
		0x07CA, 0x0001, 0x081E, 0x0054, 0x081F, 0x0054, 0x0873, 0x0054, 0x08C7, 
		0x0061, 0x091B, 0x0062, 0x097C, 0x0063, 0x09DE, 0x0061, 0x0A41, 0x0063, 
		0x0AA2, 0x0054, 0x0B05, 0x0054, 0x0B59, 0x0054, 0x0BAD, 0x0001, 0x0C01, 
		0x004D, 0x0C02, 0x004D, 0x0C4F, 0x004D, 0x0C9C, 0x0061, 0x0CE9, 0x0053, 
		0x0D4A, 0x0063, 0x0D9D, 0x0054, 0x0E00, 0x0054, 0x0E54, 0x0054, 0x0EA8, 
	}
)

smlua_anim_util_register_animation("MARIO_DYING_CUTSCENE",
	1,
	0,
	0,
	0,
	1800,
	{
		0x0000, 0x0059, 0x005A, 0x005C, 0x005F, 0x0062, 0x0066, 0x006A, 0x006D, 
		0x0070, 0x0071, 0x0072, 0x0072, 0x0073, 0x0074, 0x0074, 0x0075, 0x0075, 
		0x0075, 0x0075, 0x0076, 0x0076, 0x0076, 0x0075, 0x0075, 0x0075, 0x0075, 
		0x0074, 0x0074, 0x0073, 0x0073, 0x0072, 0x0071, 0x006E, 0x0067, 0x0060, 
		0x005A, 0x0056, 0x0053, 0x0050, 0x004E, 0x0000, 0x0000, 0x3FFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x7F9E, 0x7F5F, 0x7EEB, 
		0x7E37, 0x7D59, 0x7C69, 0x7B7C, 0x7AA9, 0x7A07, 0x79AB, 0x797C, 0x7951, 
		0x792A, 0x7907, 0x78E8, 0x78CE, 0x78B7, 0x78A5, 0x7898, 0x788F, 0x788B, 
		0x788B, 0x7891, 0x789B, 0x78AA, 0x78BF, 0x78D9, 0x78F8, 0x791C, 0x7946, 
		0x7976, 0x79AB, 0x7AA6, 0x7C8A, 0x7E6C, 0x7F5F, 0x7F2C, 0x7E65, 0x7D4F, 
		0x7C2F, 0x7B4C, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0x013C, 0x0197, 0x0246, 0x035D, 0x04B5, 0x0625, 
		0x0786, 0x08AF, 0x097A, 0x09BD, 0x09A4, 0x0979, 0x093B, 0x08ED, 0x0890, 
		0x0827, 0x07B2, 0x0734, 0x06AD, 0x0621, 0x058F, 0x04FB, 0x0465, 0x03D0, 
		0x033C, 0x02AC, 0x0222, 0x019E, 0x0123, 0x00B2, 0x004D, 0xFFF5, 0xFFF4, 
		0x0064, 0x0105, 0x0197, 0x0211, 0x0294, 0x0319, 0x0397, 0x0408, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0x0000, 
		0x0006, 0x0010, 0x001A, 0x0027, 0x0039, 0x004C, 0x005E, 0x0068, 0x006F, 
		0x007D, 0x009D, 0x00C1, 0x00D5, 0x00E9, 0x010C, 0x0128, 0x0123, 0x0118, 
		0x012D, 0x0121, 0x00AA, 0xFFFF, 0xFF80, 0xFE67, 0xFD23, 0xF87A, 0xEC53, 
		0xDDA3, 0xD30F, 0xD027, 0xD15C, 0xD2A0, 0xD297, 0xD296, 0xD299, 0xD29E, 
		0xD2A0, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFE, 0xFFFE, 0xFFFE, 
		0xFFFE, 0xFFFF, 0x0004, 0x000D, 0x001A, 0x0027, 0x0030, 0x0038, 0x0041, 
		0x004B, 0x0057, 0x0060, 0x0061, 0x0066, 0x007F, 0x009A, 0x00A7, 0x00B1, 
		0x00CA, 0x00D7, 0x00BD, 0x008D, 0x0075, 0x0000, 0xFE82, 0xFCC5, 0xFB03, 
		0xFA38, 0xFBAB, 0xFDE7, 0xFF32, 0xFE82, 0xFCE1, 0xFBBC, 0xFB75, 0xFB6C, 
		0xFB87, 0xFBAA, 0xFBBC, 0xDD4F, 0xDDD2, 0xDEB3, 0xE000, 0xE198, 0xE35E, 
		0xE534, 0xE6FB, 0xE894, 0xE9E0, 0xEA30, 0xE96E, 0xE6BA, 0xE55A, 0xE681, 
		0xE813, 0xE87E, 0xE6A7, 0xE45C, 0xE407, 0xE56E, 0xE5B6, 0xE381, 0xE13A, 
		0xE15B, 0xE2A1, 0xE1A5, 0xDDE0, 0xDEE9, 0xE038, 0xDA41, 0xD975, 0xD965, 
		0xD910, 0xD5C0, 0xD523, 0xDF1F, 0xEC76, 0xF6D4, 0xFB71, 0xFD16, 0xFDC4, 
		0xFE52, 0xFE64, 0xFE2F, 0xFDE8, 0xFDC4, 0x0001, 0xFFFE, 0xC170, 0xE685, 
		0xE733, 0xE836, 0xE9C7, 0xEBB4, 0xEDCB, 0xEFD9, 0xF1AB, 0xF30F, 0xF3D2, 
		0xF42E, 0xF480, 0xF4C8, 0xF506, 0xF53A, 0xF563, 0xF583, 0xF598, 0xF5A3, 
		0xF5A4, 0xF59B, 0xF588, 0xF56B, 0xF544, 0xF513, 0xF4D7, 0xF492, 0xF443, 
		0xF3E9, 0xF386, 0xF319, 0xF2A1, 0xF0A0, 0xECD2, 0xE910, 0xE733, 0xE7B1, 
		0xE961, 0xEBB3, 0xEE17, 0xEFFD, 0xD2A8, 0xD3BB, 0xD5B2, 0xD8B8, 0xDC70, 
		0xE07C, 0xE480, 0xE81F, 0xEAFB, 0xECB9, 0xEDC5, 0xEECB, 0xEFC7, 0xF0B9, 
		0xF1A0, 0xF278, 0xF341, 0xF3FA, 0xF4A0, 0xF531, 0xF5AD, 0xF611, 0xF65C, 
		0xF68D, 0xF6A1, 0xF696, 0xF66C, 0xF621, 0xF5B2, 0xF51F, 0xF466, 0xF384, 
		0xEEB8, 0xE50A, 0xDAA7, 0xD3BB, 0xD11F, 0xD05B, 0xD0AA, 0xD142, 0xD15E, 
		0x9C33, 0x9B97, 0x9AB7, 0x995A, 0x97AC, 0x95DC, 0x9417, 0x928A, 0x9164, 
		0x90D2, 0x90A0, 0x907B, 0x9062, 0x9056, 0x9054, 0x905E, 0x9072, 0x9090, 
		0x90B7, 0x90E6, 0x911D, 0x915C, 0x91A2, 0x91ED, 0x923F, 0x9296, 0x92F1, 
		0x9350, 0x93B3, 0x9418, 0x9480, 0x94E9, 0x9640, 0x98A1, 0x9AD1, 0x9B97, 
		0x9A9D, 0x98AF, 0x9644, 0x93D2, 0x91D1, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xDCF8, 0xDCA4, 0xDC11, 
		0xDB2A, 0xDA0D, 0xD8DA, 0xD7B2, 0xD6B4, 0xD601, 0xD5B7, 0xD5B3, 0xD5BC, 
		0xD5D1, 0xD5F1, 0xD61C, 0xD64F, 0xD68B, 0xD6CD, 0xD717, 0xD765, 0xD7B9, 
		0xD80F, 0xD869, 0xD8C4, 0xD920, 0xD97B, 0xD9D6, 0xDA2F, 0xDA85, 0xDAD6, 
		0xDB24, 0xDB6B, 0xDB67, 0xDB36, 0xDB6E, 0xDCA4, 0xDF16, 0xE255, 0xE5F1, 
		0xE97C, 0xEC88, 0xF5A8, 0xF75D, 0xFAA2, 0xFFBB, 0x0600, 0x0CCA, 0x1371, 
		0x194F, 0x1DBC, 0x2010, 0x210D, 0x21E1, 0x228F, 0x2316, 0x2378, 0x23B6, 
		0x23D1, 0x23CA, 0x23A1, 0x2357, 0x22EE, 0x2267, 0x21C1, 0x20FF, 0x2021, 
		0x1F29, 0x1E16, 0x1CEA, 0x1BA6, 0x1A4C, 0x18DA, 0x1754, 0x121E, 0x0857, 
		0xFE10, 0xF75D, 0xF517, 0xF4CE, 0xF5A8, 0xF6CB, 0xF75D, 0xF229, 0xF2EF, 
		0xF44F, 0xF673, 0xF915, 0xFBEF, 0xFEBC, 0x0136, 0x0317, 0x041A, 0x048F, 
		0x04F4, 0x054B, 0x0592, 0x05CB, 0x05F5, 0x0611, 0x061E, 0x061E, 0x0610, 
		0x05F5, 0x05CC, 0x0596, 0x0553, 0x0504, 0x04A8, 0x043F, 0x03CA, 0x034A, 
		0x02BD, 0x0225, 0x0182, 0xFF2A, 0xFAB3, 0xF5FF, 0xF2EF, 0xF1E5, 0xF1C4, 
		0xF228, 0xF2AC, 0xF2EF, 0xEECB, 0xEE09, 0xEC9E, 0xEA6F, 0xE7C0, 0xE4D4, 
		0xE1F1, 0xDF5A, 0xDD55, 0xDC24, 0xDB7A, 0xDAD7, 0xDA3D, 0xD9AE, 0xD928, 
		0xD8AF, 0xD841, 0xD7E0, 0xD78D, 0xD748, 0xD713, 0xD6ED, 0xD6D8, 0xD6D5, 
		0xD6E4, 0xD706, 0xD73C, 0xD786, 0xD7E5, 0xD85B, 0xD8E8, 0xD98C, 0xDCB5, 
		0xE2FF, 0xE9AE, 0xEE09, 0xEF7E, 0xEFAC, 0xEF20, 0xEE66, 0xEE09, 0x0001, 
		0xFFFE, 0xC170, 0xF6B6, 0xF746, 0xF869, 0xFA2B, 0xFC55, 0xFEAF, 0x00FF, 
		0x030F, 0x04A6, 0x058C, 0x0602, 0x066F, 0x06D3, 0x072C, 0x077B, 0x07C0, 
		0x07FA, 0x0829, 0x084D, 0x0865, 0x0872, 0x0873, 0x0867, 0x084F, 0x082A, 
		0x07F8, 0x07B9, 0x076D, 0x0713, 0x06AA, 0x0634, 0x05AE, 0x02DD, 0xFD84, 
		0xF8A6, 0xF746, 0xFA3B, 0xFF90, 0x0619, 0x0CAA, 0x1218, 0x2FF5, 0x2EFF, 
		0x2D53, 0x2AC7, 0x27A6, 0x2439, 0x20CA, 0x1DA2, 0x1B0C, 0x1950, 0x1816, 
		0x16D5, 0x1591, 0x144D, 0x130B, 0x11CF, 0x109C, 0x0F74, 0x0E5B, 0x0D54, 
		0x0C62, 0x0B87, 0x0AC7, 0x0A25, 0x09A4, 0x0947, 0x0910, 0x0904, 0x0925, 
		0x0975, 0x09F9, 0x0AB2, 0x103A, 0x1BA3, 0x27A7, 0x2EFF, 0x3088, 0x2F6C, 
		0x2CD6, 0x29F4, 0x27F3, 0x78EB, 0x79BB, 0x7B53, 0x7DCA, 0x80D4, 0x8420, 
		0x8761, 0x8A4A, 0x8C8C, 0x8DDB, 0x8E91, 0x8F3C, 0x8FDB, 0x906E, 0x90F4, 
		0x916D, 0x91D7, 0x9232, 0x927E, 0x92BA, 0x92E5, 0x92FE, 0x9305, 0x92FA, 
		0x92DA, 0x92A7, 0x925F, 0x9202, 0x918E, 0x9104, 0x9062, 0x8FA8, 0x8B9A, 
		0x83CB, 0x7C6D, 0x79BB, 0x7CCF, 0x82FA, 0x8ABA, 0x928E, 0x98F8, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xE819, 0xE7A4, 
		0xE6E9, 0xE5C5, 0xE45E, 0xE2DA, 0xE15F, 0xE015, 0xDF23, 0xDEAD, 0xDE8A, 
		0xDE72, 0xDE66, 0xDE64, 0xDE6C, 0xDE7E, 0xDE99, 0xDEBC, 0xDEE7, 0xDF19, 
		0xDF51, 0xDF90, 0xDFD3, 0xE01C, 0xE068, 0xE0B8, 0xE10B, 0xE160, 0xE1B7, 
		0xE20F, 0xE268, 0xE2C0, 0xE41E, 0xE674, 0xE82A, 0xE7A4, 0xE45C, 0xDF6D, 
		0xD9B1, 0xD3FF, 0xCF32, 0x03A5, 0x028B, 0x003C, 0xFCA8, 0xF842, 0xF37B, 
		0xEEC7, 0xEA96, 0xE75C, 0xE58A, 0xE49C, 0xE3C2, 0xE2FB, 0xE249, 0xE1AC, 
		0xE125, 0xE0B3, 0xE057, 0xE013, 0xDFE5, 0xDFD0, 0xDFD3, 0xDFEE, 0xE022, 
		0xE071, 0xE0D9, 0xE15C, 0xE1FA, 0xE2B3, 0xE389, 0xE47B, 0xE58A, 0xEA18, 
		0xF2FD, 0xFC68, 0x028B, 0x049B, 0x04DD, 0x0417, 0x030F, 0x028B, 0x0FE7, 
		0x1035, 0x10C7, 0x11AA, 0x12C1, 0x13F0, 0x151B, 0x1624, 0x16F1, 0x1764, 
		0x179F, 0x17D5, 0x1806, 0x1833, 0x1859, 0x187B, 0x1897, 0x18AE, 0x18BF, 
		0x18CA, 0x18CF, 0x18CF, 0x18C8, 0x18BB, 0x18A8, 0x188E, 0x186D, 0x1846, 
		0x1818, 0x17E3, 0x17A7, 0x1764, 0x1643, 0x140F, 0x11BA, 0x1035, 0x0FB2, 
		0x0FA2, 0x0FD3, 0x1014, 0x1035, 0xE5D2, 0xE4FE, 0xE36E, 0xE104, 0xDE0C, 
		0xDAD3, 0xD7A5, 0xD4D1, 0xD2A4, 0xD169, 0xD0C9, 0xD035, 0xCFAF, 0xCF37, 
		0xCECD, 0xCE72, 0xCE25, 0xCDE7, 0xCDB9, 0xCD9A, 0xCD8C, 0xCD8D, 0xCDA0, 
		0xCDC3, 0xCDF8, 0xCE3F, 0xCE97, 0xCF02, 0xCF7F, 0xD00F, 0xD0B2, 0xD169, 
		0xD47C, 0xDA7D, 0xE0D9, 0xE4FE, 0xE662, 0xE68E, 0xE609, 0xE557, 0xE4FE, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0xBF5E, 0xF786, 0xF7C7, 0xF83B, 0xF8EC, 0xF9C5, 0xFAB3, 0xFBA1, 0xFC7B, 
		0xFD2D, 0xFDA3, 0xFDF4, 0xFE47, 0xFE9A, 0xFEED, 0xFF3F, 0xFF90, 0xFFDD, 
		0x0028, 0x006E, 0x00B0, 0x00EC, 0x0122, 0x0150, 0x0177, 0x0196, 0x01AB, 
		0x01B6, 0x01B6, 0x01AB, 0x0193, 0x016E, 0x013C, 0xFFDE, 0xFD07, 0xF9EE, 
		0xF7C7, 0xF6D0, 0xF654, 0xF620, 0xF604, 0xF5CD, 0xF4D4, 0xF4B9, 0xF488, 
		0xF43C, 0xF3DE, 0xF378, 0xF314, 0xF2BA, 0xF275, 0xF24D, 0xF238, 0xF224, 
		0xF212, 0xF201, 0xF1F2, 0xF1E5, 0xF1D9, 0xF1CF, 0xF1C7, 0xF1C1, 0xF1BD, 
		0xF1BB, 0xF1BC, 0xF1BE, 0xF1C3, 0xF1CA, 0xF1D3, 0xF1DF, 0xF1EE, 0xF1FF, 
		0xF212, 0xF229, 0xF286, 0xF340, 0xF412, 0xF4B9, 0xF52A, 0xF58A, 0xF5DF, 
		0xF62C, 0xF676, 0xA8C4, 0xA7EF, 0xA674, 0xA432, 0xA16B, 0x9E62, 0x9B5A, 
		0x9894, 0x9653, 0x94DA, 0x93D9, 0x92D5, 0x91D1, 0x90CF, 0x8FD0, 0x8ED9, 
		0x8DE9, 0x8D05, 0x8C2F, 0x8B67, 0x8AB2, 0x8A11, 0x8986, 0x8914, 0x88BD, 
		0x8883, 0x8868, 0x8870, 0x889B, 0x88ED, 0x8968, 0x8A0E, 0x8E5A, 0x9744, 
		0xA10C, 0xA7EF, 0xAB37, 0xAD12, 0xAE0F, 0xAEC2, 0xAFBB, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x201D, 0x2124, 0x230B, 
		0x25F3, 0x2986, 0x2D6D, 0x3153, 0x34DF, 0x37BD, 0x3996, 0x3AD0, 0x3C0C, 
		0x3D46, 0x3E7B, 0x3FAB, 0x40D0, 0x41EA, 0x42F5, 0x43EF, 0x44D5, 0x45A5, 
		0x465B, 0x46F5, 0x4771, 0x47CC, 0x4804, 0x4815, 0x47FD, 0x47B9, 0x4747, 
		0x46A5, 0x45CF, 0x4071, 0x3561, 0x295E, 0x2124, 0x1DA0, 0x1C0E, 0x1BA2, 
		0x1B8E, 0x1B07, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 
		0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 
		0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 
		0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE31A, 0xE2E8, 0xE294, 0xE284, 
		0xE31A, 0xE47E, 0xE666, 0xE88C, 0xEAAA, 0xEC79, 0x0000, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
		0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xBF5E, 0x0AE3, 0x0ABC, 
		0x0A7A, 0x0A1B, 0x09A7, 0x0924, 0x089C, 0x0816, 0x079B, 0x0731, 0x06CF, 
		0x0665, 0x05F4, 0x057D, 0x0503, 0x0486, 0x0407, 0x0389, 0x030C, 0x0292, 
		0x021D, 0x01AE, 0x0146, 0x00E6, 0x0091, 0x0047, 0x000A, 0xFFDB, 0xFFBC, 
		0xFFAE, 0xFFB2, 0xFFCA, 0x0153, 0x04A8, 0x084A, 0x0ABC, 0x0BB0, 0x0C07, 
		0x0C02, 0x0BE3, 0x0BEC, 0x0AA4, 0x0AC1, 0x0AF4, 0x0B42, 0x0BA2, 0x0C0B, 
		0x0C75, 0x0CD5, 0x0D25, 0x0D5A, 0x0D80, 0x0DA6, 0x0DCD, 0x0DF4, 0x0E1A, 
		0x0E40, 0x0E65, 0x0E88, 0x0EAA, 0x0ECA, 0x0EE7, 0x0F01, 0x0F18, 0x0F2B, 
		0x0F3B, 0x0F46, 0x0F4C, 0x0F4E, 0x0F4A, 0x0F40, 0x0F31, 0x0F1A, 0x0E7C, 
		0x0D32, 0x0BC5, 0x0AC1, 0x0A3E, 0x09EF, 0x09BD, 0x0997, 0x0969, 0xA951, 
		0xA8CB, 0xA7EA, 0xA69D, 0xA504, 0xA33E, 0xA168, 0x9FA2, 0x9E09, 0x9CBD, 
		0x9B95, 0x9A56, 0x9905, 0x97A6, 0x963C, 0x94CD, 0x935B, 0x91EB, 0x9082, 
		0x8F23, 0x8DD1, 0x8C93, 0x8B6A, 0x8A5C, 0x896C, 0x889F, 0x87F9, 0x877D, 
		0x8730, 0x8716, 0x8733, 0x878B, 0x8C35, 0x9649, 0xA14E, 0xA8CB, 0xABE1, 
		0xAD29, 0xAD63, 0xAD4D, 0xADA5, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
		0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
		0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
		0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
		0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
		0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
		0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
		0xFFFF, 0x0000, 0xFFFF, 0x1F1B, 0x1FEB, 0x2151, 0x2368, 0x25F9, 0x28CF, 
		0x2BB4, 0x2E73, 0x30D7, 0x32A9, 0x342E, 0x35CA, 0x377A, 0x3937, 0x3AFE, 
		0x3CC8, 0x3E92, 0x4056, 0x420F, 0x43B9, 0x454E, 0x46CA, 0x4827, 0x4961, 
		0x4A72, 0x4B57, 0x4C0A, 0x4C85, 0x4CC5, 0x4CC4, 0x4C7D, 0x4BEB, 0x4578, 
		0x37C7, 0x2927, 0x1FEB, 0x1D65, 0x1DD5, 0x1FF0, 0x226C, 0x23FE, 0xFF93, 
		0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 
		0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 
		0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 
		0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF93, 0xFF94, 0xFF94, 0xFF93, 0xFF90, 
		0xFF8C, 0xFF88, 0xFF83, 0xFF80, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 
		0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 
		0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 
		0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 0xFF4E, 
		0xFF4D, 0xFF4D, 0xFF4D, 0xFF4E, 0xFF50, 0xFF52, 0xFF55, 0xFF58, 0xFF5B, 
		0xE043, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 
		0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 
		0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 
		0xE041, 0xE041, 0xE041, 0xE041, 0xE041, 0xE029, 0xE001, 0xDFF9, 0xE041, 
		0xE0EB, 0xE1D4, 0xE2DC, 0xE3DF, 0xE4BC,
	},
	{
		0x0001, 0x0000, 0x0028, 0x0001, 0x0001, 0x0029, 0x0001, 0x002A, 0x0001, 
		0x002B, 0x0001, 0x002C, 0x0029, 0x002D, 0x0001, 0x0056, 0x0029, 0x0057, 
		0x0029, 0x0080, 0x0029, 0x00A9, 0x0029, 0x00D2, 0x002F, 0x00FB, 0x002F, 
		0x012A, 0x002F, 0x0159, 0x0001, 0x0188, 0x0001, 0x0189, 0x0001, 0x018A, 
		0x0029, 0x018B, 0x0029, 0x01B4, 0x0029, 0x01DD, 0x0029, 0x0206, 0x0029, 
		0x022F, 0x0029, 0x0258, 0x0029, 0x0281, 0x0029, 0x02AA, 0x0029, 0x02D3, 
		0x0001, 0x02FC, 0x0001, 0x02FD, 0x0001, 0x02FE, 0x0029, 0x02FF, 0x0029, 
		0x0328, 0x0029, 0x0351, 0x0028, 0x037A, 0x0028, 0x03A2, 0x0029, 0x03CA, 
		0x0029, 0x03F3, 0x0029, 0x041C, 0x0029, 0x0445, 0x0029, 0x046E, 0x0028, 
		0x0497, 0x0001, 0x04BF, 0x0029, 0x04C0, 0x0029, 0x04E9, 0x0029, 0x0512, 
		0x0029, 0x053B, 0x0027, 0x0564, 0x0029, 0x058B, 0x0029, 0x05B4, 0x0027, 
		0x05DD, 0x0029, 0x0604, 0x0029, 0x062D, 0x0028, 0x0656, 0x0001, 0x067E, 
		0x0029, 0x067F, 0x0029, 0x06A8, 0x0029, 0x06D1, 0x0028, 0x06FA, 0x0028, 
		0x0722, 0x0029, 0x074A, 0x0029, 0x0773, 0x0029, 0x079C, 0x0029, 0x07C5,
	}
)



-----------Locals-------------
local texMarioLessHigh = get_texture_info('mariolesshigh')
local texBloodOverlay = get_texture_info('bloodoverlay')
local texTrippyOverlay = get_texture_info('trippy')


------Variables n' stuff------
E_MODEL_BLOOD_SPLATTER = smlua_model_util_get_id("blood_splatter_geo")
E_MODEL_BLOOD_SPLATTER2 = smlua_model_util_get_id("blood_splatter2_geo")
E_MODEL_BLOOD_SPLATTER_WALL = smlua_model_util_get_id("blood_splatter_wall_geo")
E_MODEL_SMILER = smlua_model_util_get_id("smiler_geo")
E_MODEL_SMILER2 = smlua_model_util_get_id("smiler2_geo")
E_MODEL_SMILER3 = smlua_model_util_get_id("smiler3_geo")
E_MODEL_LAVA = smlua_model_util_get_id("lava_geo")
COL_LAVA = smlua_collision_util_get("lava_collision")
E_MODEL_SKYBOX = smlua_model_util_get_id("skybox_geo")
E_MODEL_SKYBOX2 = smlua_model_util_get_id("skybox2_geo")
E_MODEL_GSSHADOW = smlua_model_util_get_id("gsshadow_geo")
COL_GSSHADOW = smlua_collision_util_get("gsshadowcol_collision")
E_MODEL_LIGHTNING = smlua_model_util_get_id("lightning_geo")
E_MODEL_LIGHTNING2 = smlua_model_util_get_id("lightning2_geo")
E_MODEL_LIGHTNING3 = smlua_model_util_get_id("lightning3_geo")
E_MODEL_RING = smlua_model_util_get_id("ring_geo")

highmusic = audio_stream_load("high.mp3")
smwbonusmusic = audio_stream_load("smwbonusloop.mp3")
boss = audio_stream_load("croppedcastle.mp3")

gSamples = {
	audio_sample_load("bonebreak.mp3"),
	audio_sample_load("bigexplosion.mp3"),
	audio_sample_load("electricscream.mp3"),
	audio_sample_load("shock.mp3"),
	audio_sample_load("mariodeath.mp3"),
	audio_sample_load("angrymario.mp3"),
	audio_sample_load("flames.mp3"),
	audio_sample_load("killyoshi.mp3"),
	audio_sample_load("smwbonusend.mp3"),
	audio_sample_load("slip.mp3"),
	audio_sample_load("splash.mp3"),
	audio_sample_load("punch.mp3"),
	audio_sample_load("goomba.mp3"),
	audio_sample_load("agonymario.mp3"),
	audio_sample_load("cooloff.mp3"),
	audio_sample_load("thunder.mp3")

}

local sBoneBreak = 1
local sBigExplosion = 2
local sElectricScream = 3
local sShock = 4
local sSplatter = 5
local sAngryMario = 6
local sFlames = 7
local sKillYoshi = 8
local sSMWBonusEnd = 9
local sSlip = 10
local sSplash = 11
local sPunch = 12
local sGoombaStomp = 13
local sAgonyMario = 14
local sCoolOff = 15
local sThunder = 16

function local_play(id, pos, vol)
	audio_sample_play(gSamples[id], pos, (is_game_paused() and 0 or vol))
end
function network_play(id, pos, vol, i)
    local_play(id, pos, vol)
    network_send(true, {id = id, x = pos.x, y = pos.y, z = pos.z, vol = vol, i = network_global_index_from_local(i)})
end

hook_event(HOOK_ON_PACKET_RECEIVE, function (data)
	if is_player_active(gMarioStates[network_local_index_from_global(data.i)]) ~= 0 then
		local_play(data.id, {x=data.x, y=data.y, z=data.z}, data.vol)
	end
end)

gStateExtras = {}
for i = 0, MAX_PLAYERS-1 do
	gStateExtras[i] = {
		splatter = 1,
		enablesplattimer = 0, --w
		splattimer = 0,
		jumpland = 0,
		disappear = 0,
		bigthrowenabled = 0, --w
		bigthrowtimer = 0,
		isdead = false,
		stomped = false,

		disableuntilnextwarp = false,
		snowdeathtimer = 0,
		snowdeath = 0,
		penguinholding = 0,
		penguintimer = 0,
		objtimer = 0,
		
		ishigh = 0,
		outsidegastimer = 60,
		highdeathtimer = 0,

		splatterdeath = 0, -- w

		mariodisintegrate = 0,
		mariotouchingwater = 0,
	}
end
toadgui = 0
toadguitimer = 0

ukikiheldby = -1
ukikiholding = 0
ukikitimer = 0

mariohighalpha = 0
mariobloodalpha = 0
mariohallucinate = 0

ACT_GONE = allocate_mario_action(ACT_GROUP_CUTSCENE|ACT_FLAG_STATIONARY|ACT_FLAG_INTANGIBLE)

function act_gone(m)
    m.marioObj.header.gfx.node.flags = m.marioObj.header.gfx.node.flags & ~GRAPH_RENDER_ACTIVE
end
hook_mario_action(ACT_GONE, act_gone)

-----Custom Behaviors-----

function killer_exclamation_boxes(m) -- Makes exclamation boxes drop on top of you! (squishes)
	box = obj_get_nearest_object_with_behavior_id(m.marioObj, id_bhvExclamationBox)

	if box ~= nil then
		if lateral_dist_between_objects(m.marioObj, box) < 50 and m.pos.y < box.oPosY and m.pos.y > box.oPosY - 400 then
			box.oPosY = box.oPosY - 100
		end
	end
end

function bhv_custom_kingwhomp(obj) -- makes king whomp give you quicksand
	local m = nearest_mario_state_to_object(obj)
	if obj.oHealth == 3 then
		obj_scale(obj, .2)
	end
	if obj.oHealth == 2 then
		whompblood = spawn_sync_object(id_bhvStaticObject, E_MODEL_BLOOD_SPLATTER, obj.oPosX, obj.oPosY + 1, obj.oPosZ, nil)
		obj_scale(whompblood, .4)
		local_play(sSplatter, m.pos, 1)
		--play_sound_with_freq_scale(SOUND_OBJ_KING_WHOMP_DEATH, m.marioObj.header.gfx.cameraToObject, 3.0)
		obj_mark_for_deletion(obj)
		stop_background_music(SEQ_EVENT_BOSS)
		spawn_default_star(m.pos.x, m.pos.y + 200, m.pos.z)
	end
	if obj.oMoveFlags & OBJ_MOVE_LANDED ~= 0 and obj.oHealth >= 2 then
		spawn_sync_object(id_bhvBowserShockWave, E_MODEL_BOWSER_WAVE, obj.oPosX, obj.oPosY, obj.oPosZ, nil)
	end
	obj.oForwardVel = 30
	if lateral_dist_between_objects(m.marioObj, obj) < 700 then
		--m.floor.type = surface_ --SURFACE_QUICKSAND
	end
end

function bhv_custom_kingbobomb(obj) -- Funny boss battle
	local m = nearest_mario_state_to_object(obj)
	if obj.oMoveFlags & OBJ_MOVE_LANDED ~= 0 then
		--obj.oHealth = obj.oHealth - 1
	end
	if obj.oHealth == 6 then
		obj_scale(obj, 1.6)
		gBehaviorValues.KingBobombFVel = 3
		gBehaviorValues.KingBobombYawVel = 160
	end
	if obj.oHealth == 5 then
		obj_scale(obj, 1.1)
		gBehaviorValues.KingBobombFVel = 6.0
		gBehaviorValues.KingBobombYawVel = 320
	end
	if obj.oHealth == 4 then
		obj_scale(obj, .7)
		gBehaviorValues.KingBobombFVel = 12.0
		gBehaviorValues.KingBobombYawVel = 640
	end
	if obj.oHealth == 3 then
		obj_scale(obj, .5)
		gBehaviorValues.KingBobombFVel = 24.0
		gBehaviorValues.KingBobombYawVel = 1280
	end
	if obj.oHealth == 2 then
		obj_scale(obj, .25)
		gBehaviorValues.KingBobombFVel = 26
		gBehaviorValues.KingBobombYawVel = 1400
	end
	if obj.oHealth == 1 then
		bobsplat = spawn_sync_object(id_bhvStaticObject, E_MODEL_BLOOD_SPLATTER, obj.oPosX, obj.oPosY + 1, obj.oPosZ, nil)
		spawn_sync_object(id_bhvMistCircParticleSpawner, E_MODEL_MIST, obj.oPosX, obj.oPosY, obj.oPosZ, nil)
		obj_scale(bobsplat, .4)
		local_play(sSplatter, m.pos, 1)
		obj_mark_for_deletion(obj)
		stop_background_music(SEQ_EVENT_BOSS)
		spawn_default_star(m.pos.x, m.pos.y + 200, m.pos.z)
	end
end


function bobomb_loop(o) -- makes bobombs SCARY fast (Thanks blocky.cmd!!)
	local player = nearest_player_to_object(o)
	if o.oAction == 0 then
		if player ~= nil and
		   obj_return_home_if_safe(o, o.oHomeX, o.oHomeY, o.oHomeZ, 400) == 1 and
		   dist_between_objects(o, player) < 600 then
			o.oBobombFuseLit = 1
			o.oAction = BOBOMB_ACT_CHASE_MARIO
		end
	elseif o.oAction == 2 then
		o.oForwardVel = 35.0
		object_step()

		if player ~= nil then
			obj_turn_toward_object(o, player, 16, 0x800)
		end
	end
end

function bhv_custom_boulder(obj) --Locks onto mario and homes-in on him.
	local m = nearest_player_to_object(obj)
	obj_turn_toward_object(obj, m, 16, 0x800)
end

function bhv_custom_bowserbomb(bowsbomb) --Oscillates up and down
	local m = nearest_mario_state_to_object(bowsbomb)
	if bowsbomb.oTimer >= 10 then
		bowsbomb.oPosY = math.random(-1500, 1500)
		bowsbomb.oTimer = 0
	end
end

function bhv_custom_bouncing_fireball(obj) --Locks onto mario and homes-in on him.
	local m = nearest_player_to_object(obj)
	obj_turn_toward_object(obj, m, 16, 0x800)
end

function bhv_custom_flyguy(obj)
	obj.oForwardVel = 100
	obj.oFlyGuyIdleTimer = 0
	if (is_within_100_units_of_mario(obj.oPosX, obj.oPosY, obj.oPosZ) == 1) then
		obj.oAction = FLY_GUY_ACT_SHOOT_FIRE
		obj.oAction = FLY_GUY_ACT_SHOOT_FIRE
		obj.oAction = FLY_GUY_ACT_SHOOT_FIRE
		obj.oAction = FLY_GUY_ACT_SHOOT_FIRE
	end
end

--[[ I tried to make coins run away from mario like 6 different ways. It aint happening. 
function bhv_custom_coins(obj)
	local player = nearest_mario_state_to_object(obj)
	--local player = nearest_player_to_object(obj)
	if mario_is_within_rectangle(obj.oPosX - 250, obj.oPosX + 250, obj.oPosZ - 250, obj.oPosZ + 250) ~= 0 then
		coin = spawn_sync_object(id_bhvBlueCoinSliding, E_MODEL_YELLOW_COIN, obj.oPosX, obj.oPosY, obj.oPosZ, nil)
		obj_mark_for_deletion(obj)
		coin.oForwardVel = 20.0;
		angleToPlayer = obj_angle_to_object(coin, player.marioObj)
		coin.oMoveAngleYaw = angleToPlayer + 0x8000
	end
end
]]

function bhv_custom_bully(obj)
	local m = nearest_mario_state_to_object(obj)
	obj.oHomeX = m.pos.x
	obj.oHomeY = m.pos.y
	obj.oHomeZ = m.pos.z
	if (obj.oAction == BULLY_ACT_CHASE_MARIO) then
		obj.oForwardVel = 30
	end
	if (obj.oAction == BULLY_ACT_PATROL) then
		obj.oForwardVel = 30
	end

end

function bhv_custom_explosion(obj) -- replaces generic explosions with NUKES! (Bigger radius, bigger explosion, louder)
	local m = nearest_mario_state_to_object(obj)
	local_play(sBigExplosion, m.pos, 1)
	spawn_sync_if_main(id_bhvBowserBombExplosion, E_MODEL_BOWSER_FLAMES, obj.oPosX, obj.oPosY, obj.oPosZ, nil, 0)
	if dist_between_objects(obj, m.marioObj) <= 850 then
		m.squishTimer = 50
	end
end

function bhv_custom_chain_chomp(obj)
	if (obj.oChainChompReleaseStatus == CHAIN_CHOMP_NOT_RELEASED) then
		obj.oMoveAngleYaw = obj.oMoveAngleYaw * 5
		obj.oForwardVel = obj.oForwardVel * 3
		obj.oTimer = 0
	else
		if obj.oTimer >= 117 then
			local m = nearest_mario_state_to_object(obj)
			squishblood(obj)
			chompmist = spawn_sync_object(id_bhvMistCircParticleSpawner, E_MODEL_MIST, obj.oPosX, obj.oPosY, obj.oPosZ, nil)
			obj_scale(chompmist, 3)
			set_camera_shake_from_hit(SHAKE_LARGE_DAMAGE)
			local_play(sSplatter, m.pos, 1)
			obj_mark_for_deletion(obj)
		end
	end

	--if obj.oChainChompHitGate == true then
	--if obj.oChainChompReleaseStatus == CHAIN_CHOMP_RELEASED_JUMP_AWAY then
		--if obj.oMoveFlags & OBJ_MOVE_HIT_WALL then
		--obj_get_nearest_object_with_behavior_id(o, id_bhvChainChompGate)
		--if obj_check_if_collided_with_object(obj, o) ~= 0 then
		--if obj.oChainChompHitGate == true then


end

--[[
function bhv_custom_chain_chomp(obj)
	if obj.oChainChompReleaseStatus == CHAIN_CHOMP_RELEASED_LUNGE_AROUND then
		obj.oChainChompReleaseStatus = CHAIN_CHOMP_NOT_RELEASED
	end
	obj.oMoveAngleYaw = obj.oMoveAngleYaw * 5
	obj.oForwardVel = obj.oForwardVel * 3
end
]]

function bhv_custom_goomba_loop(obj) -- make goombas faster, more unpredictable. Will lunge at Mario
	local m = nearest_mario_state_to_object(obj)
	if obj.oGoombaJumpCooldown >= 9 then
		obj.oGoombaJumpCooldown = 8
		obj.oVelY = obj.oVelY + 10
		obj.oForwardVel = 70
	end
	obj.oHomeX = m.pos.x
	obj.oHomeY = m.pos.y
	obj.oHomeZ = m.pos.z
end

function bhv_custom_thwomp(obj)
	local m = nearest_player_to_object(obj)
	if lateral_dist_between_objects(m, obj) < 150 and (floodenabled ~= true) then --Without disabling, TTC is nearly unbeatable thanks to the thwomp at the top.
		obj.oPosY = m.oPosY
	end
end

function bhv_custom_thwomp2(obj)
	local m = nearest_player_to_object(obj)
	if lateral_dist_between_objects(m, obj) < 150 then
		obj.oPosY = m.oPosY
	end
end

function bhv_custom_pitbowlball(obj)
	local m = nearest_player_to_object(obj)
	if lateral_dist_between_objects(m, obj) < 350 then
		obj.oForwardVel = obj.oForwardVel + 200
	end
end

--WF Sliding platforms after the weird rock eye guys.
function bhv_custom_whomp_slidingpltf(obj)
	obj.oWFSlidBrickPtfmMovVel = 100
end

--Whomps jump FAR now!
function bhv_custom_whomp(obj)
	obj_scale(obj, 2)
	--obj.oForwardVel = 9.0
	obj.oTimer = 101

	--obj.oForwardVel = 40
end

--SeeSaw Objects spin like windmills
function bhv_custom_seesaw(obj)
	obj.oSeesawPlatformPitchVel = -400
end

function bhv_custom_sign(obj) --This is the single most evil addition to the game. Real proud of this one :')
	local m = nearest_player_to_object(obj)
	if lateral_dist_between_objects(m, obj) < 500 then
		--evilsign = 
		spawn_sync_if_main(id_bhvGoomba, E_MODEL_WOODEN_SIGNPOST, obj.oPosX, obj.oPosY, obj.oPosZ, nil, 0)
		obj_mark_for_deletion(obj)
	end		
end

function bhv_custom_toxbox(obj) -- Yeah this isn't doing anything. These guys move in a stupid way that I can't understand.
	if obj ~= nil then
		--obj.oTimer = obj.oTimer + 1
		--tox_box_move(0, 1, 1, 0)
	end
end

function bhv_custom_tree(obj) -- Trees fall down through the map when approached.
	local m = nearest_player_to_object(obj)
	if lateral_dist_between_objects(m, obj) < 150 then
		obj.oPosY = obj.oPosY - 500
	end
end


function bhv_custom_bowlball(bowlball) -- I've got big balls, oh I've got big balls. They're such BIG balls, fancy big balls! And he's got big balls, and she's got big balls!
	obj_scale(bowlball, 1.8)
	bowlball.oForwardVel = bowlball.oForwardVel + 1
	bowlball.oFriction = 1
	if bowlball.oTimer > 180 then
		obj_mark_for_deletion(bowlball)
	end
end

function bhv_custom_bowlballspawner(obj) -- Idk if this actually does anything, but maybe?
	obj.oBBallSpawnerSpawnOdds = 1

end

function bhv_bowser_key_spawn_ukiki(obj) --Spawns Ukiki for an annoying minigame. 
	spawn_sync_if_main(id_bhvUkiki, E_MODEL_UKIKI, obj.oPosX, obj.oPosY + 50, obj.oPosZ, function (o)
		o.oAction = 3
	end, 0)
	cur_obj_disable_rendering_and_become_intangible(obj)
	fadeout_music(0)
	audio_stream_play(smwbonusmusic, true, 1)
end
---@param obj Object
function bhv_bowser_key_ukiki_loop(obj)
	local o = obj_get_nearest_object_with_behavior_id(obj, id_bhvUkiki)
	if o ~= nil then
		cur_obj_disable_rendering_and_become_intangible(obj)
		obj_copy_pos(obj, o)
		obj.oBehParams = 1
	elseif obj.oBehParams == 1 then
		cur_obj_enable_rendering_and_become_tangible(obj)
		obj.oAction = 0
		obj.oPosY = obj.oPosY + 200
		obj.oBehParams = 0
	end
end

-------functions------------

---@param o Object
function squishblood(o) -- Creates instant pool of impact-blood under mario.
	spawn_sync_if_main(id_bhvStaticObject, E_MODEL_BLOOD_SPLATTER, o.oPosX, find_floor_height(o.oPosX, o.oPosY, o.oPosZ) + 2, o.oPosZ,
	function (obj)
		local z, normal = {x=0,y=0,z=0}, cur_obj_update_floor_height_and_get_floor().normal
		obj.oFaceAnglePitch = 16383-calculate_pitch(z, normal)
		obj.oFaceAngleYaw = calculate_yaw(z, normal)
	end, 0)
end

ACT_NECKSNAP = allocate_mario_action(ACT_GROUP_AUTOMATIC|ACT_FLAG_INVULNERABLE|ACT_FLAG_STATIONARY)


---@param m MarioState
function act_necksnap(m)
    common_death_handler(m, MARIO_ANIM_SUFFOCATING, 86)
	smlua_anim_util_set_animation(m.marioObj, "MARIO_NECKSNAP")
end
hook_mario_action(ACT_NECKSNAP, act_necksnap)

--Electricutes the F out of Mario
---@param m MarioState
function act_shocked(m)
	m.actionTimer = m.actionTimer + 1
	set_mario_animation(m, MARIO_ANIM_SHOCKED)
	if m.actionTimer % 2 == 0 then
		m.flags = m.flags | MARIO_METAL_SHOCK
	else
		m.flags = m.flags & ~(MARIO_METAL_SHOCK)
	end
	if (m.actionTimer) == 20 or (m.actionTimer) == 40 or (m.actionTimer) == 50 or (m.actionTimer) == 65 then
		m.particleFlags = PARTICLE_MIST_CIRCLE
	end
	if (m.actionTimer) >= 50 then
		m.marioBodyState.eyeState = MARIO_EYES_DEAD
	end
	if (m.actionTimer) == 75 or (m.actionTimer) == 82 or (m.actionTimer) == 90 or (m.actionTimer) == 95 or
	   (m.actionTimer) == 100 or (m.actionTimer) == 105 or (m.actionTimer) == 108 or (m.actionTimer) == 114 or
	   (m.actionTimer) == 118 or (m.actionTimer) == 121 or (m.actionTimer) == 124 or (m.actionTimer) == 127 or
	   (m.actionTimer) == 130 or (m.actionTimer) == 132 or (m.actionTimer) == 134 or (m.actionTimer) == 136 or (m.actionTimer) == 138 then
		m.particleFlags = PARTICLE_TRIANGLE|PARTICLE_MIST_CIRCLE
	end
	if (m.actionTimer) == 140 then
		m.particleFlags = PARTICLE_TRIANGLE
		m.squishTimer = 50
		m.health = 120
	end
end
hook_mario_action(ACT_SHOCKED, act_shocked)

function splattertimer(m) --This timer is needed to prevent mario from immediately splatting again right after respawning. Adds some fluff to his death too.
	local s = gStateExtras[m.playerIndex]
	if (s.enablesplattimer) == 1 then
		s.splattimer = s.splattimer + 1
	end
	if (s.splattimer) == 2 then
		m.health = 120
		set_mario_action(m, ACT_THROWN_FORWARD, 0) --Throws mario forward more to "sell" the fall damage big impact.
		if (s.disappear) == 1 then --No fall damage, so Mario got squished. No corpse. It's funnier this way. 
			set_mario_action(m, ACT_GONE, 0)
			if not s.isdead and ia(m) then
				gGlobalSyncTable.deathcounter = gGlobalSyncTable.deathcounter + 1
			end
			s.isdead = true
		end
		if (s.disappear) == 1 then --Not a fall damage death, so cap won't fly as far. Works better since this is mostly triggered by enemies or objects smashing mario.
			mario_blow_off_cap(m, 15) 
		else --Fall damage death means bigger impact, so hat is blown off more violently than above.
			mario_blow_off_cap(m, 45)
		end
		s.splattimer = s.splattimer + 1
	end

	if (s.splattimer) == 14 then
		spawn_sync_if_main(id_bhvStaticObject, E_MODEL_BLOOD_SPLATTER2, m.pos.x, m.pos.y + 1, m.pos.z, nil, m.playerIndex)
	end

	if (s.splattimer) == 20 then
		if (s.disappear) == 0 then
			set_mario_action(m, ACT_DEATH_ON_STOMACH, 0)
		end
	end
	if (s.splattimer) == 80 then
		if (floodenabled ~= true) then
		level_trigger_warp(m, WARP_OP_DEATH) --Official Death Warp
		end
	end
	if (s.splattimer) == 150 then
		s.enablesplattimer = 0
		s.splatter = 1
		s.splattimer = 0
		s.disappear = 0
	end
end

function mario_update(m) -- ALL Mario_Update hooked commands.
	if is_player_active(m) == 0 then return end
	local s = gStateExtras[m.playerIndex]
----------------------------------------------------------------------------------------------------------------------------------
	--SPLAT CHECK. CHECKS TO SEE IF MARIO IS HIGH ENOUGH TO SPLAT.
	--IF S.splatter is equal to 1, that means splattering is enabled and Mario CAN be splattered. (Doesn't mean he IS splattered) 
	--This gets set to '0' when Mario IS splattered. After the splatter timer is up, it sets s.splatter back to 1 to re-enable splattering. 
	if (s.splatter) == 1 then 
		if m.peakHeight >= 750 and m.vel.y <= -55 then  --Checks if Mario takes fall damage
			s.jumpland = 1 --If fall damage, then 1
		else
			s.jumpland = 0 --No fall damage
		end

		if s.jumpland == 1 and m.squishTimer >= 1 then -- Checks if Mario is squished from fall damage. If so, his mangled corpse will stay on screen.
			local_play(sSplatter, m.pos, 1)
			s.splatterdeath = 1
			s.splatter = 0
		end
		if s.jumpland == 0 and m.squishTimer >= 1 then --Checks if Mario was squished from NON-FALL damage. Objects/enemies that squish Mario will smoosh his corpse to invisible. 
			local_play(sSplatter, m.pos, 1)
			s.splatterdeath = 1
			s.splatter = 0
			s.disappear = 1 -- No corpse mode.  
		end
	end
	if (s.splatterdeath) == 1 then
		m.particleFlags = PARTICLE_MIST_CIRCLE
		squishblood(m.marioObj)
		s.splatterdeath = 0
		s.enablesplattimer = 1
		s.bigthrowenabled = 0
		s.bigthrowtimer = 0
	end
	----------------------------------------------------------------------------------------------------------------------------------
	--(Hazy Maze Cave) Mario get high when walking in gas. 
	s.outsidegastimer = s.outsidegastimer + 1 -- This is constantly counting up. As long as Mario is in gas, this number will keep getting set back to zero. If Mario isnt in gas, the timer will count up to 60 and trigger some "not in gas" commands. 


    if (m.input & INPUT_IN_POISON_GAS ~= 0) and m.flags & MARIO_METAL_CAP == 0 and not s.isdead then --This should be used as a check against if Mario is inside of gas. If so, IsHigh will be set to 1.
		s.ishigh = 1
		s.outsidegastimer = 0
		m.health = m.health + 4
	end

	if (s.ishigh == 1) then
		set_environment_region(2, -400) --RAISES THE GAS HIGHER
	end

	if ((s.outsidegastimer == 30) or s.isdead) and s.ishigh == 1 then --If Mario is outside the gas for 1 second, the high wears off and resets all timers.
		s.ishigh = 0
		s.highdeathtimer = 0
		if ia(m) then
			local butterfly = obj_get_first_with_behavior_id(id_bhvButterfly)
			while butterfly ~= nil do
				obj_mark_for_deletion(butterfly)
				butterfly = obj_get_next_with_same_behavior_id(butterfly)
			end
			audio_stream_stop(highmusic)
			set_background_music(0, get_current_background_music(), 0)
		end
	end
	if ia(m) then
		if mariohighalpha ~= 0 then
			set_override_fov(lerp(45, lerp(140, 30, .5+math.cos(m.marioObj.oTimer*.02)/2), mariohighalpha/255))
		else
			set_override_fov(0)
		end
	end
	if (s.ishigh) == 1 then --Mario is in gas, thefore the death timer starts counting and M velocity is lowered.
		s.highdeathtimer = s.highdeathtimer + 1
		if ia(m) then
			if (s.highdeathtimer < 1100) then
				m.forwardVel = 10
				set_handheld_shake(HAND_CAM_SHAKE_UNUSED)
			elseif (s.highdeathtimer > 1100) then
				set_handheld_shake(HAND_CAM_SHAKE_HIGH)
			end
		end
	end
	if (s.highdeathtimer) == 1 then --initiates the 'high' music
		fadeout_level_music(30*30)
		audio_stream_play(highmusic, true, 1)
		spawn_non_sync_object(id_bhvButterfly, E_MODEL_BUTTERFLY, m.pos.x, m.pos.y, m.pos.z, nil)
	end
	if ia(m) then
		if (s.highdeathtimer) == 200 or --Some butterflies start spawning around Mario.
		(s.highdeathtimer) == 400 or
		(s.highdeathtimer) == 600 or
		(s.highdeathtimer) == 700 or
		(s.highdeathtimer) == 800 or
		(s.highdeathtimer) == 900 or
		(s.highdeathtimer) == 1000 or
		(s.highdeathtimer) == 1100 or
		(s.highdeathtimer) == 1200 then
			spawn_non_sync_object(id_bhvButterfly, E_MODEL_BUTTERFLY, m.pos.x + 5, m.pos.y - 5, m.pos.z + 5, nil)
			spawn_non_sync_object(id_bhvButterfly, E_MODEL_BUTTERFLY, m.pos.x, m.pos.y, m.pos.z, nil)
		end
		if (s.highdeathtimer) == 100 or --Spawns occasional coins spawn to keep Mario alive
		(s.highdeathtimer) == 300 or
		(s.highdeathtimer) == 500 or
		(s.highdeathtimer) == 700 or
		(s.highdeathtimer) == 900 or
		(s.highdeathtimer) == 1100 or
		(s.highdeathtimer) == 1200 then
			local randommodel = math.random(3)
			if (randommodel == 1) then
				spawn_non_sync_object(id_bhvMrIBlueCoin, E_MODEL_SMILER, m.pos.x, m.pos.y, m.pos.z, nil)
			elseif (randommodel == 2) then
				spawn_non_sync_object(id_bhvMrIBlueCoin, E_MODEL_SMILER2, m.pos.x, m.pos.y, m.pos.z, nil)
			elseif (randommodel == 3) then
				spawn_non_sync_object(id_bhvMrIBlueCoin, E_MODEL_SMILER3, m.pos.x, m.pos.y, m.pos.z, nil)
			end
		end
	end
	if (s.highdeathtimer) == 1100 then
		play_character_sound(m, CHAR_SOUND_COUGHING1)
	end
	if (s.highdeathtimer) == 1200 then
		play_character_sound(m, CHAR_SOUND_COUGHING2)
	end
	if (s.highdeathtimer) == 1210 then
		play_character_sound(m, CHAR_SOUND_COUGHING3)
	end
	if (s.highdeathtimer) == 1250 then
		play_character_sound(m, CHAR_SOUND_COUGHING2)
	end
	if (s.highdeathtimer) == 1265 then
		play_character_sound(m, CHAR_SOUND_COUGHING3)
	end
	if (s.highdeathtimer) == 1290 then --Mario dies from gas and resets all timers.

	end
	if (s.highdeathtimer) == 1340 then --Mario dies.
		m.health = 0xff
		set_mario_action(m, ACT_DEATH_ON_STOMACH, 0)
		play_character_sound(m, CHAR_SOUND_DYING)
		s.ishigh = 0
		s.outsidegastimer = 30
		s.highdeathtimer = 0
		s.isdead = true
	end
	
----------------------------------------------------------------------------------------------------------------------------------
	--Mario Disintegrates when on fire
	if (s.mariodisintegrate == 1) then
		obj_scale(deathflame, 6)
		deathflame.oGraphYOffset = 100
		deathflame.oPosX = m.pos.x
		deathflame.oPosY = m.pos.y
		deathflame.oPosZ = m.pos.z
		m.marioObj.oMarioBurnTimer = 1
	end

	if (m.health <= 300) and (s.mariodisintegrate == 1) then
		m.squishTimer = 50
		audio_sample_stop(gSamples[sAgonyMario])
		obj_mark_for_deletion(deathflame)
	end

	if (s.mariodisintegrate) == 1 then
        s.mariotouchingwater = m.pos.y <= m.waterLevel
        if (s.mariotouchingwater) then
            spawn_mist_particles()
            spawn_mist_particles()
            spawn_mist_particles()
            spawn_mist_particles()
            spawn_mist_particles()
			network_play(sCoolOff, m.pos, 1, m.playerIndex)
			audio_sample_stop(gSamples[sAgonyMario])
            s.mariodisintegrate = 0
			if (deathflame ~= nil) then
				obj_mark_for_deletion(deathflame)
			end
        end
    end

----------------------------------------------------------------------------------------------------------------------------------
	--ENDING OF THE GAME CUTSCENE
	peach = obj_get_nearest_object_with_behavior_id(o, id_bhvEndPeach)
	if peach ~= nil then

		if (peach.oTimer == 950) then
			set_mario_action(m, ACT_THROWN_FORWARD, 0)
			
		end
		if (peach.oTimer >= 952) then
			mario_blow_off_cap(m, 23)
			m.marioBodyState.eyeState = MARIO_EYES_DEAD
		end
		if (peach.oTimer >= 950) and (peach.oTimer <= 969) then
			m.forwardVel = 6
		end
		if (peach.oTimer == 957) then
			spawn_mist_particles()
			play_character_sound(m, CHAR_SOUND_ATTACKED)
			local_play(sSplatter, gMarioStates[0].marioObj.header.gfx.cameraToObject, 1)	
		end
		if (peach.oTimer == 960) then
			squishblood(m.marioObj)
			
		end
		if (peach.oTimer == 965) then
			smlua_anim_util_set_animation(m.marioObj, "MARIO_DYING_CUTSCENE")
		end
		if (peach.oTimer >= 970) then
			m.forwardVel = -1
		end
		if (peach.oTimer == 990) then
			play_character_sound(m, CHAR_SOUND_DYING)
		end
		if (peach.oTimer == 1290) then
			m.numLives = 0
			level_trigger_warp(m, WARP_OP_CREDITS_END)
		end
	end


----------------------------------------------------------------------------------------------------------------------------------
	--Mips is a pain to catch
	mips = obj_get_nearest_object_with_behavior_id(o, id_bhvMips)
	if mips ~= nil then
		mips.oMipsForwardVelocity = 100
	end
----------------------------------------------------------------------------------------------------------------------------------
	--Racing penguin is stupid fast now. Only beatable by falling to the bottom of slide. Will insult mario to death if race lost, will crash into wall and splat if race won.
	racepen = obj_get_nearest_object_with_behavior_id(o, id_bhvRacingPenguin)
	if racepen ~= nil then 
		if (racepen.oAction == 3) then
			racepen.oRacingPenguinWeightedNewTargetSpeed = 240
			racepen.oForwardVel = 240
		end

		if (racepen.oRacingPenguinMarioWon ~= 0) then
			if (racepen.oRacingPenguinReachedBottom ~= 0) and (racepen.oMoveFlags & OBJ_MOVE_HIT_WALL ~= 0) then
				squishblood(racepen)
				local_play(sSplatter, m.pos, 1)
				cur_obj_play_sound_2(SOUND_OBJ_POUNDING_LOUD)
				set_camera_shake_from_point(SHAKE_POS_SMALL, racepen.oPosX, racepen.oPosY, racepen.oPosZ)
				obj_mark_for_deletion(racepen)
				spawn_sync_object(id_bhvStar, E_MODEL_STAR, m.pos.x, m.pos.y + 200, m.pos.z, function(star)
					star.oBehParams = 2 << 24
				end)				
				if (racepen ~= nil) then
				racelost = 1
				end
			else
				racelost = 1
			end
		end
		if (racepen.oPrevAction & racepen.oRacingPenguinFinalTextbox) ~= 0 and (racelost == 1) then
			racepen.oTimer = 0
			racelost = 0
		end
		if (racepen.oTimer >= 40) and (racelost == 0) then
			m.health = 120
		end
	
	end
----------------------------------------------------------------------------------------------------------------------------------
    --Goomba stomping sound effect.
    if m.bounceSquishTimer > 0 and not s.stomped then
        local_play(sGoombaStomp, m.pos, 1)
        s.stomped = true
    elseif m.bounceSquishTimer == 0 then s.stomped = false end

----------------------------------------------------------------------------------------------------------------------------------
	--Enables King Bobombs RIDICULOUS cannon-arm mario launch.
	if (m.action == ACT_GRABBED) then
		s.bigthrowenabled = 1
	end
	if (s.bigthrowenabled) == 1 then
		m.forwardVel = 150
	end
----------------------------------------------------------------------------------------------------------------------------------
	--When getting the 100 coin star, a bobomb nuke spawns on Mario.
	if (m.numCoins) == 100 then 
		m.numCoins = m.numCoins + 1
		spawn_sync_if_main(id_bhvBobomb, E_MODEL_BOBOMB_BUDDY, m.pos.x, m.pos.y, m.pos.z, nil, m.playerIndex)
	end
----------------------------------------------------------------------------------------------------------------------------------
	--If mario is in JRB he cannot go lower than the lava.
	local n = gNetworkPlayers[0]
	if n.currLevelNum == LEVEL_JRB and m.pos.y < 1050 then
		set_mario_action(m, ACT_LAVA_BOOST, 0)
		m.pos.y = 1051
	end

----------------------------------------------------------------------------------------------------------------------------------
	--Pokey cactus do things
	pokey = obj_get_nearest_object_with_behavior_id(o, id_bhvPokey)
	if (pokey ~= nil) then
		pokey.oForwardVel = 40
	end 
----------------------------------------------------------------------------------------------------------------------------------
	--Switches snow landing to snow drowning
	if (m.action == ACT_HEAD_STUCK_IN_GROUND) or (m.action == ACT_BUTT_STUCK_IN_GROUND) or (m.action == ACT_FEET_STUCK_IN_GROUND) then
		m.particleFlags = PARTICLE_MIST_CIRCLE
		set_mario_action(m, ACT_GONE, 0)
		m.health = 0xff
		s.snowdeath = 1
 	end
	 if (s.snowdeath == 1) then
		s.snowdeathtimer = s.snowdeathtimer + 1
	end
	if (s.snowdeathtimer) == 60 then
		if ia(m) then gGlobalSyncTable.deathcounter = gGlobalSyncTable.deathcounter + 1 end
		if (floodenabled ~= true) then
			level_trigger_warp(m, WARP_OP_DEATH)
		end
		s.snowdeathtimer = 0
		s.snowdeath = 0
	end
----------------------------------------------------------------------------------------------------------------------------------

	if m.heldObj ~= nil and (obj_has_behavior_id(m.heldObj, id_bhvUkiki) ~= 0) then
		ukikiholding = 1
		ukikiheldby = m.playerIndex

	end
	if (ukikiholding) == 1 then
		if m.heldObj ~= nil and (obj_has_behavior_id(m.heldObj, id_bhvUkiki) ~= 0) then
			ukikitimer = ukikitimer + 1
		end
	end
	if (ukikitimer) == 2 and m.playerIndex == ukikiheldby then
		local_play(sAngryMario, m.pos, 1)
		audio_stream_stop(smwbonusmusic)
		local_play(sSMWBonusEnd, m.pos, 1)
	end
	if (ukikitimer) == 40 then
		obj_mark_for_deletion(m.heldObj)
		m.heldObj = nil
		set_mario_action(m, ACT_PUNCHING, 0)
		ukikitimer = ukikitimer + 1
		print("40")
	end
	if (ukikitimer) >= 41 and ia(m) then
		ukikitimer = ukikitimer + 1
		print("timing")
	end
	if (ukikitimer) == 50 then
		print("kaboom!")
		if m.playerIndex == ukikiheldby then
			m.particleFlags = PARTICLE_MIST_CIRCLE
			squishblood(m.marioObj)
			local_play(sSplatter, m.pos, 1)
			ukikiheldby = -1
			ukikiholding = 0
			ukikitimer = 0
		end
	end
----------------------------------------------------------------------------------------------------------------------------------
	--Mario has his hat after every respawn. Makes for funny deaths when his hat flies off.
	save_file_clear_flags(SAVE_FLAG_CAP_ON_GROUND | SAVE_FLAG_CAP_ON_KLEPTO | SAVE_FLAG_CAP_ON_UKIKI | SAVE_FLAG_CAP_ON_MR_BLIZZARD)
	m.cap = m.cap & ~(SAVE_FLAG_CAP_ON_GROUND | SAVE_FLAG_CAP_ON_KLEPTO | SAVE_FLAG_CAP_ON_UKIKI | SAVE_FLAG_CAP_ON_MR_BLIZZARD)
----------------------------------------------------------------------------------------------------------------------------------
	--(Whomps Fortress) No more wood platform
	o = obj_get_nearest_object_with_behavior_id(o, id_bhvWfRotatingWoodenPlatform)
	if (o) ~= nil then
		if mario_is_within_rectangle(o.oPosX - 50, o.oPosX + 50, o.oPosZ - 50, o.oPosZ + 50) ~= 0 then
			o.oPosY = o.oPosY - 100
			obj_mark_for_deletion(o)		
		end
	end
----------------------------------------------------------------------------------------------------------------------------------
	--BoB Objects

	----This makes the chain chomp gate disappear.
	o = obj_get_nearest_object_with_behavior_id(o, id_bhvChainChompGate)
	if (o) ~= nil then
		if mario_is_within_rectangle(o.oPosX - 150, o.oPosX + 150, o.oPosZ - 150, o.oPosZ + 150) ~= 0 then
			spawn_triangle_break_particles(30, 138, 1, 4)
			play_sound(SOUND_ACTION_HIT_2, m.marioObj.header.gfx.cameraToObject)
			obj_mark_for_deletion(o)
		end
	end

----------------------------------------------------------------------------------------------------------------------------------
	--(Lethal Lava Land) LLL Objects

	----The rotating hexagon plaform with flames on it, far back left corner.
	o = obj_get_nearest_object_with_behavior_id(o, id_bhvLllRotatingHexagonalPlatform)
	if (o) ~= nil then
		o.oMoveAngleYaw = o.oMoveAngleYaw + 5000
	end

	----The Drawbridge by the eye across from spawn.
	o = obj_get_nearest_object_with_behavior_id(o, id_bhvLllDrawbridge)
	if (o) ~= nil then
		if mario_is_within_rectangle(o.oPosX - 250, o.oPosX + 250, o.oPosZ - 250, o.oPosZ + 250) ~= 0 then
			obj_mark_for_deletion(o)
		end
	end

	----This is a 2x2 (4-square) type platform that sinks, not the individual tiles.
	o = obj_get_nearest_object_with_behavior_id(o, id_bhvLllSinkingSquarePlatforms)
	if (o) ~= nil then
		o.oMoveAngleYaw = o.oMoveAngleYaw + 500
	end


----------------------------------------------------------------------------------------------------------------------------------
	-- (Cool Cool Mountain) Baby penguin gets thrown after 8 seconds of mario losing his patience.
	if m.heldObj ~= nil and (obj_has_behavior_id(m.heldObj,id_bhvSmallPenguin) ~= 0) then
		s.penguinholding = 1
	end
	if (s.penguinholding) == 1 then
		if ((m.heldObj) ~= nil) and (obj_has_behavior_id(m.heldObj,id_bhvSmallPenguin) ~= 0) then
			s.penguintimer = s.penguintimer + 1
		end
	end
	if (s.penguintimer) == 230 then
		local_play(sAngryMario, m.pos, 1)
	end
	if (s.penguintimer) == 280 then
		--mario_throw_held_object(m.heldObj)
		obj_mark_for_deletion(m.heldObj)
		set_mario_action(m, ACT_PUNCHING, 0)
		s.penguintimer = s.penguintimer + 1	
	end
	if (s.penguintimer) >= 281 then
		s.penguintimer = s.penguintimer + 1	
	end
	if (s.penguintimer) == 290 then
		m.particleFlags = PARTICLE_MIST_CIRCLE
		squishblood(m.marioObj)
		local_play(sSplatter, m.pos, 1)
		s.penguinholding = 0
		s.penguintimer = 0
	end

----------------------------------------------------------------------------------------------------------------------------------
	--Fast and Killable Klepto
	klepto = obj_get_nearest_object_with_behavior_id(o, id_bhvKlepto)
	if klepto ~= nil then
		klepto.oKleptoSpeed = 120.0
		if (klepto.oAction == KLEPTO_ACT_STRUCK_BY_MARIO) then
			squishblood(klepto)
			local_play(sSplatter, m.pos, 1)
			play_sound(SOUND_OBJ_KLEPTO1, m.pos)
			obj_mark_for_deletion(klepto)
		end
	end
----------------------------------------------------------------------------------------------------------------------------------
	--Bowser 3 battle (epic battle) EnvFX Fix.
	--[[
	if n.currLevelNum == LEVEL_BOWSER_3 or n.currLevelNum == LEVEL_JRB then
		set_override_envfx(ENVFX_LAVA_BUBBLES)
	else
		set_override_envfx(-1)
	end	
]]



end

function throwtimer (m) -- Temporarily increases Mario's velocity when getting thrown. Makes chuckya and king bobomb throws MUCH further.
	local s = gStateExtras[m.playerIndex]

	if (s.bigthrowenabled) == 1 then
		s.bigthrowtimer = s.bigthrowtimer + 1
	end
	if (s.bigthrowtimer) >= 100 then
		if m.floorHeight == m.pos.y then
			m.squishTimer = 30
		end
	end
end

function mariohitbyenemy(m) -- Default and generic 1-hit death commands.
	local s = gStateExtras[m.playerIndex]


	-- These 'disables' fix the death counter from double-counting in the event mario gets his neck snapped and then killed again by lava.
	if (m.action == ACT_SOFT_FORWARD_GROUND_KB or m.action == ACT_SOFT_BACKWARD_GROUND_KB) and not s.disableuntilnextwarp then
		s.disableuntilnextwarp = true
	end

	-- Air Insta-Kill Mario (jumping into enemy like Chain Chomp. Mario's fault, not a chain chomp attack)
	if (m.hurtCounter > 0) and (m.action == ACT_FORWARD_AIR_KB or m.action == ACT_BACKWARD_AIR_KB) then
		m.health = 0xff
	end

	-- Air Insta-Kill Mario (Generic hits, mario pvp air kicks, etc..)
	if (m.hurtCounter > 0) and (m.action == ACT_HARD_FORWARD_AIR_KB) then
		m.forwardVel = 1150
		m.health = 0xff
	end
	if (m.hurtCounter > 0) and (m.action == ACT_HARD_BACKWARD_AIR_KB) then
		m.forwardVel = -1150
		m.health = 0xff
	end


	-- BIG fall insta-kill (Falling from REALLY high)
	if (m.hurtCounter > 0) and (m.action == ACT_HARD_BACKWARD_GROUND_KB) then
		m.health = 0xff
		m.squishTimer = 50
	end
	if (m.hurtCounter > 0) and (m.action == ACT_HARD_FORWARD_GROUND_KB) then
		m.health = 0xff
		m.squishTimer = 50
	end

end


function on_interact(m, o, intType, interacted) --Best place to switch enemy behaviors to have mario insta-die.
	local s = gStateExtras[m.playerIndex]
	print(get_behavior_name_from_id(get_id_from_behavior(o.behavior)))


	--KILLABLE TOAD 
	if (obj_has_behavior_id(o,id_bhvToadMessage)) ~= 0 and ((m.controller.buttonPressed & B_BUTTON) + (m.action & ACT_FLAG_ATTACKING) ~= 0) then
		spawn_sync_if_main(id_bhvWhitePuffExplosion, E_MODEL_WHITE_PUFF, o.oPosX, m.floorHeight + 2, o.oPosZ, nil, m.playerIndex)
		spawn_sync_if_main(id_bhvMistCircParticleSpawner, E_MODEL_MIST, o.oPosX, m.floorHeight + 2, o.oPosZ, nil, m.playerIndex)
		play_sound_with_freq_scale(SOUND_MARIO_ATTACKED, m.marioObj.header.gfx.cameraToObject, 1.25)
		squishblood(o)
		obj_mark_for_deletion(o)
		local_play(sSplatter, m.pos, 1)
		if m.action & ACT_FLAG_AIR == 0 then
			set_mario_action(m, ACT_PUNCHING, 0)
		end
		gGlobalSyncTable.toaddeathcounter = gGlobalSyncTable.toaddeathcounter + 1

	end
		
	--KILLABLE YOSHI 
	if (obj_has_behavior_id(o,id_bhvYoshi)) ~= 0 and (m.controller.buttonPressed & B_BUTTON) ~= 0 then
		spawn_sync_if_main(id_bhvWhitePuffExplosion, E_MODEL_WHITE_PUFF, o.oPosX, m.floorHeight + 50, o.oPosZ, nil, m.playerIndex)
		spawn_sync_if_main(id_bhvMistCircParticleSpawner, E_MODEL_MIST, o.oPosX, m.floorHeight + 50, o.oPosZ, nil, m.playerIndex)
		squishblood(o)
		obj_mark_for_deletion(o)
		local_play(sSplatter, m.pos, 1)
		local_play(sKillYoshi, m.pos, 1)
	end

	--Custom Bully necksnap
	if obj_has_behavior_id(o, id_bhvSmallBully) ~= 0 and (m.action == ACT_SOFT_FORWARD_GROUND_KB or m.action == ACT_SOFT_BACKWARD_GROUND_KB) then
		network_play(sBoneBreak, m.pos, 1, m.playerIndex)
		set_mario_action(m, ACT_NECKSNAP, 0)
	end

	--[[ This doesnt work and I have no clue why. 
	--Ferris wheel platform disappears after 1 second
	if obj_has_behavior_id(o, id_bhvFerrisWheelPlatform) ~= nil then
		s.objtimer = s.objtimer + 1
		if (s.objtimer) == 30 then 
			obj_mark_for_deletion(o)
			local_play(sSlip, m.pos, 1)
		end
	end
	]]

	--Custom bobomb buddy explosions
	if obj_has_behavior_id(o, id_bhvBobombBuddy) ~= 0 then
		spawn_sync_object(id_bhvExplosion, E_MODEL_EXPLOSION, o.oPosX, o.oPosY, o.oPosZ, nil)
		obj_mark_for_deletion(o)
	end

	--BIG BOOS HAUNT ENTRANCE
	if obj_has_behavior_id(o, id_bhvBooWithCage) ~= 0 and ia(m) then
		--warp_to_level(4, 1, 1)
	end

	--Snowman's head insta-kill
	if obj_has_behavior_id(o, id_bhvSnowmansBottom) ~= 0 then
		m.squishTimer = 50
	end

	--(HMC) Boulder insta-kill
	if obj_has_behavior_id(o, id_bhvBigBoulder) ~= 0 then
		m.squishTimer = 50
	end

	--[[ --Doesnt work. Causes every object to get destroyed.
	if obj_has_behavior_id(o, id_bhvWfSlidingTowerPlatform) then
		spawn_triangle_break_particles(30, 138, 1, 4)
		play_sound(SOUND_ACTION_HIT_2, m.marioObj.header.gfx.cameraToObject)
		obj_mark_for_deletion(o)
	end
	]]
	--Killable Dorrie?
	if obj_has_behavior_id(o, id_bhvDorrie) ~= 0 and (m.action & ACT_GROUND_POUND) ~= 0 then
		local_play(sSplatter, m.pos, 1)
		squishblood(o)
		obj_mark_for_deletion(o)	
	end

	--Skeeter insta-kill
	if obj_has_behavior_id(o, id_bhvSkeeter) ~= 0 and (m.hurtCounter > 0) then
		m.squishTimer = 50
	end

	--Scuttlebug insta-kill
	if obj_has_behavior_id(o, id_bhvScuttlebug) ~= 0 and (m.hurtCounter > 0) then
		m.squishTimer = 50
	end

	--Cannon Lid Breaking
	if obj_has_behavior_id(o, id_bhvCannonClosed) ~= 0 and m.action == ACT_GROUND_POUND_LAND then
		spawn_triangle_break_particles(20, 20, 1, 1)
		obj_mark_for_deletion(o)
	end

	--Custom bullet bill boom
	if obj_has_behavior_id(o, id_bhvBulletBill) ~= 0 and (m.hurtCounter > 0) then
		spawn_sync_if_main(id_bhvExplosion, E_MODEL_BOWSER_FLAMES, m.pos.x, m.pos.y, m.pos.z, nil, m.playerIndex)
	end

	if (m.hurtCounter > 0) and 
	-- Custom Bobomb explosion Mario death
	obj_has_behavior_id(o, id_bhvExplosion) +
	-- (BoB) Custom pit bowling ball death 
	obj_has_behavior_id(o, id_bhvPitBowlingBall) +
	-- Custom Goomba Mario Kill
	obj_has_behavior_id(o, id_bhvGoomba) +
	-- Custom Piranha Plant death
	obj_has_behavior_id(o, id_bhvPiranhaPlant) +
	-- twirling guys insta-death
	obj_has_behavior_id(o, id_bhvSpindrift) +
	-- Mr.Blizzard insta-death
	obj_has_behavior_id(o, id_bhvMrBlizzard) +
	-- cannon bubble insta-death
	obj_has_behavior_id(o, id_bhvWaterBomb) ~= 0
	or (
		obj_has_behavior_id(o, id_bhvBowserBodyAnchor) ~= 0
		and (o.parentObj.oAction == 4 or o.parentObj.oAction == 12)
		and o.parentObj.oVelY < -40
	) then
		m.squishTimer = 50
	end

	
	-- Custom shocking amp Kill
	if obj_has_behavior_id(o, id_bhvCirclingAmp) ~= 0 and (m.hurtCounter > 0) then
		if (floodenabled ~= true) then
			--m.health = 120 
		end
	end
	

	-- Custom FlyGuy insta-death
	if obj_has_behavior_id(o, id_bhvFlyGuy) ~= 0 and (m.hurtCounter > 0) then
		m.squishTimer = 50
	end

	-- Bowling Ball insta-death
	if obj_has_behavior_id(o, id_bhvBowlingBall) ~= 0 and (m.hurtCounter > 0) then
		if (m.action == ACT_JUMP) or (m.action == ACT_DOUBLE_JUMP) or (m.action == ACT_JUMP_KICK) or (m.action == ACT_HOLD_JUMP) or (m.action == ACT_LONG_JUMP) then
		else
			m.squishTimer = 50
		end
	end

	-- Snowman Snowball insta-death
	if obj_has_behavior_id(o, id_bhvSnowBall) ~= 0 and (m.hurtCounter > 0) then 
		spawn_sync_if_main(id_bhvExplosion, E_MODEL_EXPLOSION, m.pos.x, m.pos.y, m.pos.z, nil, m.playerIndex)
	end

	--Chain Chomp insta-deaths
	if obj_has_behavior_id(o, id_bhvChainChomp) ~= 0 and (m.hurtCounter > 0) and (m.action == ACT_BACKWARD_GROUND_KB or m.action == ACT_FORWARD_GROUND_KB) then --Custom Chain Chomp Mario Kill backward
		m.health = 0xff

		m.particleFlags = PARTICLE_MIST_CIRCLE
		set_mario_action(m, ACT_GONE, 0)
		m.squishTimer = 50
	end

	--Big bully kill mario
	if obj_has_behavior_id(o, id_bhvBigBully) ~= 0 and (m.action == ACT_SOFT_FORWARD_GROUND_KB or m.action == ACT_SOFT_BACKWARD_GROUND_KB) then
		m.squishTimer = 50
	end

end

function before_mario_action(m, action)
	local s = gStateExtras[m.playerIndex]

-------------------------------------------------------------------------------------------------------------------------------------------------
	--Disables LAVA_BOOST and replaces with a splash and insta-death... KERPLUNK!!
	if (action == ACT_LAVA_BOOST) then
		set_mario_action(m, ACT_GONE, 0)
		network_play(sSplash, m.pos, 1, m.playerIndex)
		spawn_sync_if_main(id_bhvBowserBombExplosion, E_MODEL_BOWSER_FLAMES, m.pos.x, m.pos.y, m.pos.z, nil, m.playerIndex)
		m.health = 120
		if ia(m) then gGlobalSyncTable.deathcounter = gGlobalSyncTable.deathcounter + 1 end
		if not s.isdead then
			if (floodenabled ~= true) then
				print("deathed")
				level_trigger_warp(m, WARP_OP_DEATH)
				
			end
		end
		return 1
	end
-------------------------------------------------------------------------------------------------------------------------------------------------
	--Disables LAVA RUN and replaces with death.
	if (action == ACT_BURNING_JUMP) then --removed (action == ACT_BURNING_JUMP) or (action == ACT_BURNING_FALL) since it would reset each jump
		network_play(sFlames, m.pos, 1, m.playerIndex)
		spawn_sync_object(id_bhvSmoke, E_MODEL_SMOKE, m.pos.x, m.pos.y, m.pos.z, nil)
		spawn_sync_object(id_bhvBlackSmokeMario, E_MODEL_BURN_SMOKE, m.pos.x, m.pos.y, m.pos.z, nil)

		s.mariodisintegrate = 1

		if (m.marioObj.oMarioBurnTimer == 0) and (s.mariodisintegrate == 1) then
			deathflame = spawn_sync_object(id_bhvFlame, E_MODEL_RED_FLAME, m.pos.x, m.pos.y, m.pos.z, nil)
			network_play(sAgonyMario, m.pos, 1, m.playerIndex)
		end
	end
-------------------------------------------------------------------------------------------------------------------------------------------------
	--Disables falling death and gives mario a custom death. Not really anything different, just fixes the death counter from adding +20 on a single fall. 
	if (action == ACT_FALLING_EXIT_AIRBORNE) then
		m.health = 120
		if ia(m) then gGlobalSyncTable.deathcounter = gGlobalSyncTable.deathcounter + 1 end
		if (floodenabled ~= true) then
			level_trigger_warp(m, WARP_OP_DEATH)
		end
		return ACT_GONE
	end
-------------------------------------------------------------------------------------------------------------------------------------------------
end

function action_start(m)
	if m.action == ACT_NECKSNAP then
		squishblood(m.marioObj)

	elseif m.action == ACT_SHOCKED then -- play shock sounds
		print("playing shock for "..gNetworkPlayers[m.playerIndex].name)
		network_play(sElectricScream, m.pos, 1, m.playerIndex)
		network_play(sShock, m.pos, 1, m.playerIndex)
		m.particleFlags = PARTICLE_MIST_CIRCLE
	end
end

function mariodeath(m) -- If mario is dead, this will pause the counter to prevent false positive 2nd deaths, like getting neck snapped (death 1) and then falling into lava. (death 2) 
	--Will also reset other functions as well.
	local s = gStateExtras[m.playerIndex]
	s.penguintimer = 0 -- Resets the baby-penguin timer since Mario is dead.
	
	--set_override_envfx(ENVFX_MODE_NONE)
	audio_stream_stop(highmusic) --Stops the Hazy Maze Cave custom music after death.
	audio_stream_stop(smwbonusmusic) --Stops the ukiki minigame music if Mario falls to death. 
	if not s.isdead and not s.disableuntilnextwarp then
		if ia(m) then gGlobalSyncTable.deathcounter = gGlobalSyncTable.deathcounter + 1 end
		s.isdead = true
	end
end

function marioalive() -- Resumes the death counter to accept death counts. 
	local s = gStateExtras[0]
	local n = gNetworkPlayers[0]
	audio_sample_stop(gSamples[sAgonyMario])
	s.mariodisintegrate = 0
	s.isdead = false
	s.disableuntilnextwarp = false

	if n.currLevelNum == LEVEL_JRB then
		set_override_envfx(ENVFX_LAVA_BUBBLES)
	else
		set_override_envfx(-1)
	end	

	--Resets the baby penguin timer on warp so it doesn't glitch out if mario leaves the level without fully killing the baby penguin.
	s.penguinholding = 0
	s.penguintimer = 0
end

function toaddeath(o)
	local deaths = gGlobalSyncTable.toaddeathcounter
	if obj_has_behavior_id(o, id_bhvToadMessage) ~= 0 then
		if (deaths == 10) then
			bhv_spawn_star_no_level_exit(o, 0, 1)
		end
		if (deaths == 20) then
			bhv_spawn_star_no_level_exit(o, 1, 1)
		end
		if (deaths == 30) then
			bhv_spawn_star_no_level_exit(o, 2, 1)
		end
		toadgui = 1
	end
end

function deathcounthud() -- Displays the total amount of mario deaths a server has incurred since opening. 
	screenHeight = djui_hud_get_screen_height()
	screenWidth = djui_hud_get_screen_width()
	local timerValFrames = hud_get_value(HUD_DISPLAY_TIMER)
	local timerX = 0
	local timerY = 0

	-- Move HUD graphics away from the TIMER HUD
	if timerValFrames ~= 0 then
		timerX = 60
		timerY = 17
	end
	

	--TOAD DEATH COUNTER. Each time you kill toad, the count goes up. It compares the number with the PreviousToadDeath variable, which tells it to update and triggers commands.
	--Toad gives 3 stars. I have set this to give these stars after every 100 toad kills. 
	djui_hud_print_text("Total server death count:", screenWidth - 280 - timerX, screenHeight - 78 - timerY, 1)
	djui_hud_print_text(tostring(gGlobalSyncTable.deathcounter), screenWidth - 46 - timerX, screenHeight - 78 - timerY, 1)
	local s = gStateExtras[0]
	local m = gMarioStates[0]
	if (toadgui) == 1 then
		toadguitimer = toadguitimer + 1
		djui_hud_set_color(255, 255, 0, lerp(0, 255, (math.max(0, 150-toadguitimer))/150))
		
		djui_hud_print_text("Server Toad death count:", screenWidth - 280 - timerX, screenHeight - 48 - timerY, 1)
		djui_hud_print_text(tostring(gGlobalSyncTable.toaddeathcounter), screenWidth - 46 - timerX, screenHeight - 48 - timerY, 1)
	end
	if (toadguitimer) == 150 then
		toadgui = 0
		toadguitimer = 0
	end
------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--MARIO HIGH IN GAS OVERLAY
		djui_hud_set_resolution(RESOLUTION_N64)
		djui_hud_set_color(255, 255, 255, mariohighalpha)
		djui_hud_render_texture(texMarioLessHigh, 0, 0, .87, .5)

	if (s.highdeathtimer) >= 1 then --Mario is high, therefore a hazy green gas overlay comes up on the screen.
		if mariohighalpha <= 254 then
			mariohighalpha = mariohighalpha + 1
		end
	end
	if (s.ishigh == 0) or (s.highdeathtimer >= 940) then --Mario is not high, therefore this will remove the gas effect on the hud.
		if (mariohighalpha >= 2) then
			mariohighalpha = mariohighalpha - 2
		end
		if (mariohighalpha == 1) then
			mariohighalpha = 0
		end
	end

	--MARIO BLOODY GAS OVERLAY
	djui_hud_set_resolution(RESOLUTION_N64)
	djui_hud_set_color(255, 255, 255, mariobloodalpha)
	djui_hud_render_texture(texBloodOverlay, 0, 0, .87, .5)

	if (s.highdeathtimer) >= 1000 then --Mario is very high and dying, therefore bloody gas overlay comes up on the screen.
		if mariobloodalpha <= 254 then
			mariobloodalpha = mariobloodalpha + 1
		end
	end
	if (s.ishigh == 0) then --Mario is not high, therefore this will remove the gas effect on the hud.
		if (mariobloodalpha >= 4) then
			mariobloodalpha = mariobloodalpha - 4
		end
		if (mariobloodalpha <= 3) and (mariobloodalpha >= 1)  then --Sets blood overlay to invisible.
			mariobloodalpha = 0
		end
	end

	--MARIO TRIPPY OVERLAY
	djui_hud_set_resolution(RESOLUTION_N64)
	djui_hud_set_color(255, 255, 255, mariohallucinate)
	djui_hud_render_texture(texTrippyOverlay, 0, 0, .85, .5)

	if (s.highdeathtimer) >= 360 then --Mario is hallucinating.
		if mariohallucinate <= 110 then
			mariohallucinate = mariohallucinate + 1
		end
	end
	if (s.ishigh == 0) or (s.highdeathtimer >= 1090) then --Mario is not high or too high, therefore this will remove the gas effect on the hud.
		if (mariohallucinate >= 4) then
			mariohallucinate = mariohallucinate - 3
		end
		if (mariohallucinate <= 3) and (mariohallucinate >= 1)  then --Sets trippy overlay to invisible.
			mariohallucinate = 0
		end
	end
end


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function mario_before_phys_step(m)
	local hScale = 1.0
	local vScale = 1.0

	-- faster swimming
	if (m.action & ACT_FLAG_SWIMMING) ~= 0 then
		hScale = hScale * 5.0
		if m.action ~= ACT_WATER_PLUNGE then
			vScale = vScale * 5.0
		end
	end

	m.vel.x = m.vel.x * hScale
	m.vel.y = m.vel.y * vScale
	m.vel.z = m.vel.z * hScale
end
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----GREEN DEMONS (ONCE AND FOR ALL!!) This finally works so DON'T TOUCH IT!!
local function before_phys_step(m,stepType) --Called once per player per frame before physics code is run, return an integer to cancel it with your own step result
    if m.playerIndex ~= 0 then
        return
    end
	
local obj = obj_get_nearest_object_with_behavior_id(m.marioObj,id_bhv1Up) 
    if obj~= nil and (nearest_interacting_mario_state_to_object(obj)).playerIndex == 0 and is_within_100_units_of_mario(obj.oPosX, obj.oPosY, obj.oPosZ) == 1 then --if local mario is touching 1up then
		obj_mark_for_deletion(obj)
        spawn_sync_object(id_bhvExplosion, E_MODEL_EXPLOSION, m.pos.x, m.pos.y, m.pos.z, nil)
    end

local demon = obj_get_nearest_object_with_behavior_id(m.marioObj,id_bhvHidden1upInPole) -- HAS ISSUES WITH CASTLE BRIDGE DEMON
    if demon ~= nil and (nearest_interacting_mario_state_to_object(demon)).playerIndex == 0 and is_within_100_units_of_mario(demon.oPosX, demon.oPosY, demon.oPosZ) == 1 then --if local mario is touching 1up then
        obj_mark_for_deletion(demon)
		spawn_sync_object(id_bhvExplosion, E_MODEL_EXPLOSION, m.pos.x, m.pos.y, m.pos.z, nil)
    end
end



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function lavascream(SOUND_MARIO_ON_FIRE)
	return 0
end

---------hooks--------
hook_event(HOOK_MARIO_UPDATE, mario_update)
hook_event(HOOK_MARIO_UPDATE, modsupport)
hook_event(HOOK_MARIO_UPDATE, killer_exclamation_boxes)
hook_event(HOOK_MARIO_UPDATE, testing)
hook_event(HOOK_MARIO_UPDATE, mariohitbyenemy)
hook_event(HOOK_MARIO_UPDATE, splattertimer)
hook_event(HOOK_MARIO_UPDATE, throwtimer)
hook_event(HOOK_BEFORE_MARIO_UPDATE, function (m) -- mario high
local s = gStateExtras[m.playerIndex]
if (s.ishigh) == 1 then
    if m.input & INPUT_NONZERO_ANALOG ~= 0 then
		local range = 12288
        local t = m.marioObj.oTimer/50
        local angle = atan2s(m.controller.stickY, m.controller.stickX)
        local woowoo = math.sin(2 * t) + math.sin(math.pi * t)
		
		if (s.highdeathtimer) < 1100 then m.controller.stickMag = m.controller.stickMag*.25 end
        m.intendedYaw = m.intendedYaw + woowoo*range
        m.controller.stickX = m.controller.stickMag * sins(angle+woowoo*range)
        m.controller.stickY = m.controller.stickMag * coss(angle+woowoo*range)
    end
	if (s.highdeathtimer) >= 1100 then
		m.controller.buttonDown = Z_TRIG
		m.controller.buttonPressed = Z_TRIG
	end
end
end)
hook_event(HOOK_ON_WARP, marioalive)
hook_event(HOOK_BEFORE_PHYS_STEP, mario_before_phys_step)
hook_event(HOOK_BEFORE_SET_MARIO_ACTION, before_mario_action)
hook_event(HOOK_ON_SET_MARIO_ACTION, action_start)
hook_event(HOOK_ON_DEATH, mariodeath)
hook_event(HOOK_ON_OBJECT_UNLOAD, toaddeath)
hook_event(HOOK_ON_INTERACT, on_interact)
hook_event(HOOK_ON_HUD_RENDER, deathcounthud)
hook_event(HOOK_BEFORE_PHYS_STEP, before_phys_step) --Called once per player per frame before physics code is run, return an integer to cancel it with your own step result



-------------PvP HOOKS-------------

--Custom PvP
hook_event(HOOK_ON_PVP_ATTACK, function (attacker, victim)
	local s = gStateExtras[victim.playerIndex]

	--Enables 'ground pound' PvP splattering. 
	if attacker.action == ACT_GROUND_POUND and s.splatter == 1 then
		local_play(sSplatter, victim.pos, 1)
		s.splatterdeath = 1
		s.splatter = 0
		s.disappear = 1 -- No corpse mode.  
	end

	--Punching Sounds and blood
	if (attacker.action == ACT_PUNCHING) or (attacker.action == ACT_JUMP_KICK) or (attacker.action == ACT_MOVE_PUNCHING) then
		local_play(sPunch, victim.pos, 1)
		squishblood(victim.marioObj)  
	end

	--Tripping
	if attacker.action == ACT_SLIDE_KICK then
		--local_play(sBoneBreak, victim.pos, 1) --Doesn't play consistently and I don't know why. Sometimes none, sometimes doubles. Probably not even a good sound for this anyway.
		set_mario_action(victim, ACT_GROUND_BONK, 0)  
	end

	--Neck snapping
	if attacker.action == ACT_DIVE then
		local_play(sBoneBreak, victim.pos, 1)
		set_mario_action(victim, ACT_NECKSNAP, 0)
	end




end)

function lava_init(o)
    o.oFlags = OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE
    o.collisionData = COL_LAVA
    o.header.gfx.skipInViewCheck = true
end

function lava_loop(o)
    load_object_collision_model()
end

function gsshadow_init(o)
    o.oFlags = OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE
    o.collisionData = COL_GSSHADOW
    o.header.gfx.skipInViewCheck = true
end

function gsshadow_loop(gss)
	local o = obj_get_nearest_object_with_behavior_id(gss, id_bhvGrandStar)
    load_object_collision_model()
	if o ~= nil then
		gss.oPosX = o.oPosX
		gss.oPosY = 300
		gss.oPosZ = o.oPosZ
	end
end

function bhv_ferris_wheel(o)
	local m = nearest_mario_state_to_object(o)	
	local s = gStateExtras[m.playerIndex]
	--if obj_check_if_collided_with_object(m.marioObj, o) ~= 0 then
	if mario_is_within_rectangle(o.oPosX - 150, o.oPosX + 150, o.oPosZ - 150, o.oPosZ + 150) ~= 0 then
		s.objtimer = s.objtimer + 1
		o.oMoveAngleRoll = o.oMoveAngleRoll + 10
	end
	if (s.objtimer) == 30 then 
		obj_mark_for_deletion(o)
		objtimeractivated = 0
		s.objtimer = 0
		local_play(sSlip, m.pos, 1)
	end
end

function bhv_custom_grindel(o)
	o.oTimer = 60
    cur_obj_move_standard(2)
end

function bhv_custom_spindel(o)
	sp18 = 20 - o.oSpindelUnkF4
	sp1C = sins(o.oMoveAnglePitch * 32) * 46.0
	o.oPosZ = o.oPosZ + o.oVelZ
	if (o.oTimer < sp18 * 1) then
        if (o.oSpindelUnkF8 == 0) then
            o.oVelZ = 500
            o.oAngleVelPitch = 128
        else
            o.oVelZ = -500
            o.oAngleVelPitch = -128
		end
	end	
end

function bhv_custom_firebars(o)
	o.oMoveAngleYaw = -2048
end

function bhv_custom_crushtrap(o)
	if mario_is_within_rectangle(o.oPosX -100, o.oPosX + 100, o.oPosX -100, o.oPosX + 100) then
		if o.oAction == 1 then
			o.oRollingLogUnkF4 = o.oRollingLogUnkF4 + 8
		end

		if o.oAction == 2 then
			o.oPosY = o.oHomeY + sins(o.oTimer * 0x1000) * 10.0;
			o.oAction = 3
		end

		if o.oAction == 3 then
			o.oAngleVelPitch = 2000
			o.oFaceAnglePitch = o.oFaceAnglePitch + o.oAngleVelPitch

		end
		
		if o.oTimer >= 4 then
			o.oTimer = 0
			o.oAction = 0
		end
	end
end

-------Behavior Hooks-------
--hook_behavior(id_bhv1Up, OBJ_LIST_GENACTOR, false, nil, bhv_custom_1up)
--hook_behavior(id_bhvHidden1upInPole, OBJ_LIST_GENACTOR, false, nil, bhv_custom_1up)
hook_behavior(id_bhvFlyGuy, OBJ_LIST_GENACTOR, false, nil, bhv_custom_flyguy)
hook_behavior(id_bhvBigBoulder, OBJ_LIST_GENACTOR, false, nil, bhv_custom_boulder)
hook_behavior(id_bhvBouncingFireball, OBJ_LIST_GENACTOR, false, nil, bhv_custom_bouncing_fireball)
hook_behavior(id_bhvChainChomp, OBJ_LIST_GENACTOR, false, nil, bhv_custom_chain_chomp)
hook_behavior(id_bhvBowserBomb, OBJ_LIST_GENACTOR, false, nil, bhv_custom_bowserbomb)
--hook_behavior(id_bhvYellowCoin, OBJ_LIST_LEVEL, false, nil, bhv_custom_coins)
--hook_behavior(id_bhvOneCoin, OBJ_LIST_LEVEL, false, nil, bhv_custom_coins)
--hook_behavior(id_bhvMovingYellowCoin, OBJ_LIST_LEVEL, false, nil, bhv_custom_coins)
hook_behavior(id_bhvFerrisWheelPlatform, OBJ_LIST_SURFACE, false, nil, bhv_ferris_wheel)
hook_behavior(id_bhvHorizontalGrindel, OBJ_LIST_SURFACE, false, nil, bhv_custom_grindel)
hook_behavior(id_bhvSpindel, OBJ_LIST_SURFACE, false, nil, bhv_custom_spindel)
hook_behavior(id_bhvLllRotatingHexFlame, OBJ_LIST_SURFACE, false, nil, bhv_custom_firebars)
hook_behavior(id_bhvLllVolcanoFallingTrap, OBJ_LIST_SURFACE, false, nil, bhv_custom_crushtrap)

hook_behavior(id_bhvSmallBully, OBJ_LIST_GENACTOR, false, nil, bhv_custom_bully)
hook_behavior(id_bhvToxBox, OBJ_LIST_GENACTOR, false, nil, bhv_custom_toxbox)
hook_behavior(id_bhvWfSlidingPlatform, OBJ_LIST_SURFACE, false, nil, bhv_custom_whomp_slidingpltf)
hook_behavior(id_bhvSeesawPlatform, OBJ_LIST_SURFACE, false, nil, bhv_custom_seesaw)
hook_behavior(id_bhvMessagePanel, OBJ_LIST_GENACTOR, false, nil, bhv_custom_sign)
hook_behavior(id_bhvTree, OBJ_LIST_GENACTOR, false, nil, bhv_custom_tree)
hook_behavior(id_bhvWhompKingBoss, OBJ_LIST_SURFACE, false, nil, bhv_custom_kingwhomp)
hook_behavior(id_bhvKingBobomb, OBJ_LIST_SURFACE, false, nil, bhv_custom_kingbobomb)
hook_behavior(id_bhvSmallWhomp, OBJ_LIST_SURFACE, false, nil, bhv_custom_whomp)
hook_behavior(id_bhvThwomp, OBJ_LIST_SURFACE, false, nil, bhv_custom_thwomp)
hook_behavior(id_bhvThwomp2, OBJ_LIST_SURFACE, false, nil, bhv_custom_thwomp2)
hook_behavior(id_bhvPitBowlingBall, OBJ_LIST_SURFACE, false, nil, bhv_custom_pitbowlball)
hook_behavior(id_bhvBowlingBall, OBJ_LIST_SURFACE, false, nil, bhv_custom_bowlball)
hook_behavior(id_bhvBobBowlingBallSpawner, OBJ_LIST_SURFACE, false, nil, bhv_custom_bowlballspawner)
hook_behavior(id_bhvExplosion, OBJ_LIST_PUSHABLE, false, bhv_custom_explosion, nil)
hook_behavior(id_bhvBobomb, OBJ_LIST_DESTRUCTIVE, false, nil, bobomb_loop)
hook_behavior(id_bhvGoomba, OBJ_LIST_PUSHABLE, false, nil, bhv_custom_goomba_loop)
hook_behavior(id_bhvBowserKey, OBJ_LIST_LEVEL, false, bhv_bowser_key_spawn_ukiki, bhv_bowser_key_ukiki_loop)
id_bhvLava = hook_behavior(nil, OBJ_LIST_SURFACE, true, lava_init, lava_loop, "bhvLava")
id_bhvGrandStarShadow = hook_behavior(nil, OBJ_LIST_SURFACE, true, gsshadow_init, gsshadow_loop, "bhvLava")

-- test function to warp to level, disable if necessary
hook_chat_command("bow", "ser", function ()
	warp_to_level(LEVEL_BOWSER_3, 1, 1)
	return true
end)

hook_chat_command("wf", "whomp", function ()
	warp_to_level(LEVEL_WF, 1, 0)
	return true
end)

hook_chat_command("hmc", "haz", function ()
	warp_to_level(LEVEL_HMC, 1, 0)
	return true
end)

hook_chat_command("lll", "lava", function ()
	warp_to_level(LEVEL_LLL, 1, 0)
	return true
end)

hook_chat_command("ssl", "shift", function ()
	warp_to_level(LEVEL_SSL, 1, 0)
	return true
end)

hook_chat_command("bob", "bobomb", function ()
	warp_to_level(LEVEL_BOB, 1, 0)
	return true
end)

hook_chat_command("jrb", "jolly", function ()
	warp_to_level(LEVEL_JRB, 1, 0)
	return true
end)


hook_chat_command("go", "to", function ()
	vec3f_copy(gMarioStates[0].pos, {x=1992,y=-767,z=-1140})
	return true
end)




-- to make ukiki jump from the key
hook_behavior(id_bhvUkiki, OBJ_LIST_GENACTOR, false, function (obj)
	obj.oPosY = obj.oHomeY
end, nil)

-- stop music when exiting levels
hook_event(HOOK_ON_LEVEL_INIT, function ()
	audio_stream_stop(highmusic)
	audio_stream_stop(smwbonusmusic)
	audio_stream_stop(boss)
end)

--Blocky looky here
hook_event(HOOK_ON_WARP, function ()
	local m = gMarioStates[0]
	local n = gNetworkPlayers[0]
	if n.currLevelNum == LEVEL_JRB then
		spawn_non_sync_object(id_bhvLava, E_MODEL_LAVA, m.pos.x, 1050, m.pos.z, function (o)
			--obj_scale(o, 4)
		end)
	end
end
)


--Disable mario's fire scream to make room for custom scream.
hook_event(HOOK_CHARACTER_SOUND, function (m, sound)
	if sound == CHAR_SOUND_ON_FIRE then return 0 end
end)